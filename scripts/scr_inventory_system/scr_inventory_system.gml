// scr_inventory_system.gml

function init_inventory_system() {
    global.equipment_slots = [];
    
    // –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π (4 —Å–ª–æ—Ç–∞)
    array_push(global.equipment_slots, {
        weapon: -1,
        armor: -1,
        accessory: -1,
        relic: -1
    });
    
    // –ü–æ–º–æ—â–Ω–∏—Ü—ã (3 —Å–ª–æ—Ç–∞)
    for (var i = 0; i < 3; i++) {
        array_push(global.equipment_slots, {
            weapon: -1,
            armor: -1,
            accessory: -1
        });
    }
    
    if (!variable_global_exists("playerInventory")) {
        global.playerInventory = ds_list_create();
    }
}

function AddItemToInventory(_itemId, _quantity) {
    if (!variable_global_exists("playerInventory") || !ds_exists(global.playerInventory, ds_type_list)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        return false;
    }
    
    var _itemData = ds_map_find_value(global.ItemDB, _itemId);
    if (_itemData == -1) {
        show_debug_message("–û—à–∏–±–∫–∞: –ü—Ä–µ–¥–º–µ—Ç —Å ID " + string(_itemId) + " –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!");
        return false;
    }
    
    var _stackable = _itemData[? "stackable"];
    var _maxStack = _itemData[? "maxStack"];
    
    // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∞–∫–∞ –¥–ª—è —Å—Ç–∞–∫–∞—é—â–∏—Ö—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (_stackable) {
        for (var i = 0; i < ds_list_size(global.playerInventory); i++) {
            var _invItem = ds_list_find_value(global.playerInventory, i);
            if (is_struct(_invItem) && _invItem[? "id"] == _itemId) {
                var currentQty = _invItem[? "quantity"];
                if (currentQty + _quantity <= _maxStack) {
                    _invItem[? "quantity"] = currentQty + _quantity;
                    return true;
                }
            }
        }
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    var newItem = ds_map_create();
    ds_map_add(newItem, "id", _itemId);
    ds_map_add(newItem, "quantity", _quantity);
    ds_list_add(global.playerInventory, newItem);
    
    return true;
}

function apply_artifact_effects(item_id) {
    show_debug_message("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞: " + item_id);
    
    switch(item_id) {
        case "omnipotence_crown":
            // –ö–æ—Ä–æ–Ω–∞ –í—Å–µ—Å–∏–ª–∏—è - –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Å–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            global.simultaneous_expeditions = true;
            add_notification("üëë –ö–û–†–û–ù–ê –í–°–ï–°–ò–õ–ò–Ø: –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Å–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!");
            break;
            
        case "aegis":
            // –≠–≥–∏–¥–∞ - –∞–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π
            global.expedition_auto_repeat.enabled = true;
            for (var i = 0; i < 3; i++) {
                global.expedition_auto_repeat.difficulties[i] = true;
            }
            add_notification("üõ°Ô∏è –≠–ì–ò–î–ê: –ü–µ—Ä–≤—ã–µ 3 —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –Ω–∞ –∞–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä–µ!");
            break;
            
        case "gungnir":
            // –ì—É–Ω–≥–Ω–∏—Ä - –∞–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
            global.expedition_auto_repeat.enabled = true;
            global.expedition_auto_repeat.difficulties[3] = true;
            add_notification("üî± –ì–£–ù–ì–ù–ò–†: –°–ª–æ–∂–Ω–∞—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è —Ç–µ–ø–µ—Ä—å –Ω–∞ –∞–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä–µ!");
            break;
            
        case "concept_of_victory":
            // –ö–æ–Ω—Ü–µ–ø—Ü–∏—è –ü–æ–±–µ–¥—ã - —Å–∞–º–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞
            global.expedition_instant_complete_chance = 15; // 15% —à–∞–Ω—Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            global.expedition_reward_multiplier = 2.5; // 2.5x –Ω–∞–≥—Ä–∞–¥–∞
            add_notification("üéØ –ö–û–ù–¶–ï–ü–¶–ò–Ø –ü–û–ë–ï–î–´: –®–∞–Ω—Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è + —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥!");
            break;
            
        default:
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            break;
    }
}


function EquipItem(item_index, character_index, slot_type) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    if (!variable_global_exists("playerInventory") || !ds_exists(global.playerInventory, ds_type_list)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–µ—Ä–æ—è
    if (!variable_global_exists("hero")) {
        show_debug_message("–û—à–∏–±–∫–∞: –ì–µ—Ä–æ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    if (item_index < 0 || item_index >= ds_list_size(global.playerInventory)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞: " + string(item_index));
        return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    var item_data = ds_list_find_value(global.playerInventory, item_index);
    if (is_undefined(item_data)) {
        show_debug_message("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
        return false;
    }
    
    var item_id = item_data[? "id"];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (!variable_global_exists("ItemDB") || !ds_exists(global.ItemDB, ds_type_map)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
        return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –±–∞–∑—ã
    var db_data = ds_map_find_value(global.ItemDB, item_id);
    if (db_data == -1) {
        show_debug_message("–û—à–∏–±–∫–∞: –ü—Ä–µ–¥–º–µ—Ç —Å ID " + string(item_id) + " –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    var equip_slot = db_data[? "equip_slot"];
    if (equip_slot == -1) {
        add_notification("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Å–ª–æ—Ç–∞
    var valid_slot = false;
    switch(slot_type) {
        case "weapon":
            valid_slot = (equip_slot == global.EQUIP_SLOT.WEAPON);
            break;
        case "armor":
            valid_slot = (equip_slot == global.EQUIP_SLOT.ARMOR);
            break;
        case "accessory":
            valid_slot = (equip_slot == global.EQUIP_SLOT.ACCESSORY);
            break;
        case "relic":
            valid_slot = (equip_slot == global.EQUIP_SLOT.RELIC);
            break;
    }
    
    if (!valid_slot) {
        add_notification("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –Ω–∞–¥–µ—Ç—å –≤ —ç—Ç–æ—Ç —Å–ª–æ—Ç!");
        return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ª–æ—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    var current_item_id = variable_struct_get(global.equipment_slots[character_index], slot_type);
    
    // –ï—Å–ª–∏ –≤ —Å–ª–æ—Ç–µ —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
    if (current_item_id != -1) {
        UnequipItem(character_index, slot_type);
    }
    
    // –≠–∫–∏–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ª–æ—Ç
    variable_struct_set(global.equipment_slots[character_index], slot_type, item_id);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    RemoveItemFromInventory(item_id, 1);
    
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –í–°–ï –í–û–ó–ú–û–ñ–ù–´–ï –°–í–û–ô–°–¢–í–ê –ë–û–ù–£–°–û–í, –ï–°–õ–ò –û–ù–ò –û–¢–°–£–¢–°–¢–í–£–Æ–¢
    if (!variable_struct_exists(global.hero, "equipment_bonuses")) {
        global.hero.equipment_bonuses = {};
    }
    
    if (!variable_struct_exists(global.hero.equipment_bonuses, "strength")) global.hero.equipment_bonuses.strength = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "agility")) global.hero.equipment_bonuses.agility = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "intelligence")) global.hero.equipment_bonuses.intelligence = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "defense")) global.hero.equipment_bonuses.defense = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "max_health")) global.hero.equipment_bonuses.max_health = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "gold_bonus")) global.hero.equipment_bonuses.gold_bonus = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "health_bonus")) global.hero.equipment_bonuses.health_bonus = 0;
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú –ü–ï–†–ú–ê–ù–ï–ù–¢–ù–´–ï –ë–û–ù–£–°–´ - –° –ü–†–û–í–ï–†–ö–û–ô –ù–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–ï
    if (!variable_struct_exists(global.hero.equipment_bonuses, "perm_strength")) global.hero.equipment_bonuses.perm_strength = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "perm_intelligence")) global.hero.equipment_bonuses.perm_intelligence = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "perm_agility")) global.hero.equipment_bonuses.perm_agility = 0;
 // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –±–∞—Ñ–æ–≤ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (variable_global_exists("update_companion_buff_system")) {
        update_companion_buff_system();
    }
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    var perm_strength = db_data[? "perm_strength"];
    if (!is_undefined(perm_strength)) {
        global.hero.equipment_bonuses.perm_strength += perm_strength;
        global.hero.strength += perm_strength;
    }
    
    var perm_intelligence = db_data[? "perm_intelligence"];
    if (!is_undefined(perm_intelligence)) {
        global.hero.equipment_bonuses.perm_intelligence += perm_intelligence;
        global.hero.intelligence += perm_intelligence;
    }
    
    var perm_agility = db_data[? "perm_agility"];
    if (!is_undefined(perm_agility)) {
        global.hero.equipment_bonuses.perm_agility += perm_agility;
        global.hero.agility += perm_agility;
    }
    
    // –ë–ï–ó–û–ü–ê–°–ù–û –ü–†–ò–ú–ï–ù–Ø–ï–ú –í–°–ï –ë–û–ù–£–°–´ –û–¢ –ü–†–ï–î–ú–ï–¢–ê (–° –ü–†–û–í–ï–†–ö–û–ô –ù–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–ï)
    var strength_bonus = db_data[? "strength_bonus"];
    if (!is_undefined(strength_bonus)) global.hero.equipment_bonuses.strength += strength_bonus;
    
    var agility_bonus = db_data[? "agility_bonus"];
    if (!is_undefined(agility_bonus)) global.hero.equipment_bonuses.agility += agility_bonus;
    
    var intelligence_bonus = db_data[? "intelligence_bonus"];
    if (!is_undefined(intelligence_bonus)) global.hero.equipment_bonuses.intelligence += intelligence_bonus;
    
    var defense_bonus = db_data[? "defense_bonus"];
    if (!is_undefined(defense_bonus)) global.hero.equipment_bonuses.defense += defense_bonus;
    
    var max_health_bonus = db_data[? "max_health_bonus"];
    if (!is_undefined(max_health_bonus)) global.hero.equipment_bonuses.max_health += max_health_bonus;
    
    var gold_bonus = db_data[? "gold_bonus"];
    if (!is_undefined(gold_bonus)) global.hero.equipment_bonuses.gold_bonus += gold_bonus;
    
    var health_bonus = db_data[? "health_bonus"];
    if (!is_undefined(health_bonus)) global.hero.equipment_bonuses.health_bonus += health_bonus;
    
    // –ü–†–ò–ú–ï–ù–Ø–ï–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´ –ê–†–¢–ï–§–ê–ö–¢–û–í
    apply_artifact_effects(item_id);
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –ø–æ–º–æ—â–Ω–∏—Ü
    if (variable_global_exists("calculate_companion_bonuses")) {
        calculate_companion_bonuses();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    if (variable_global_exists("update_hero_max_health")) {
        update_hero_max_health();
    }
    
    add_notification("–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ: " + db_data[? "name"]);
    return true;
}

function UnequipItem(character_index, slot_type) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
    if (!variable_global_exists("equipment_slots")) {
        show_debug_message("–û—à–∏–±–∫–∞: equipment_slots –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        return false;
    }
    
    if (!variable_global_exists("ItemDB") || !ds_exists(global.ItemDB, ds_type_map)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (ItemDB) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–µ—Ä–æ—è
    if (!variable_global_exists("hero")) {
        show_debug_message("–û—à–∏–±–∫–∞: –ì–µ—Ä–æ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–ª–æ—Ç–∞
    var item_id = variable_struct_get(global.equipment_slots[character_index], slot_type);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Å–ª–æ—Ç
    if (item_id == -1) {
        return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –±–∞–∑—ã
    var item_data = ds_map_find_value(global.ItemDB, item_id);
    if (item_data == -1) {
        show_debug_message("–û—à–∏–±–∫–∞: –ü—Ä–µ–¥–º–µ—Ç —Å ID " + string(item_id) + " –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!");
        return false;
    }
    
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –°–í–û–ô–°–¢–í–ê –ë–û–ù–£–°–û–í –ü–ï–†–ï–î –í–´–ß–ò–¢–ê–ù–ò–ï–ú
    if (!variable_struct_exists(global.hero, "equipment_bonuses")) {
        global.hero.equipment_bonuses = {};
    }
    
    if (!variable_struct_exists(global.hero.equipment_bonuses, "strength")) global.hero.equipment_bonuses.strength = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "agility")) global.hero.equipment_bonuses.agility = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "intelligence")) global.hero.equipment_bonuses.intelligence = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "defense")) global.hero.equipment_bonuses.defense = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "max_health")) global.hero.equipment_bonuses.max_health = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "gold_bonus")) global.hero.equipment_bonuses.gold_bonus = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "health_bonus")) global.hero.equipment_bonuses.health_bonus = 0;
    
    if (!variable_struct_exists(global.hero.equipment_bonuses, "perm_strength")) global.hero.equipment_bonuses.perm_strength = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "perm_intelligence")) global.hero.equipment_bonuses.perm_intelligence = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "perm_agility")) global.hero.equipment_bonuses.perm_agility = 0;
    
    // –ë–ï–ó–û–ü–ê–°–ù–û –£–ë–ò–†–ê–ï–ú –ë–û–ù–£–°–´ –ü–†–ï–î–ú–ï–¢–ê
    var strength_bonus = item_data[? "strength_bonus"];
    if (!is_undefined(strength_bonus)) global.hero.equipment_bonuses.strength -= strength_bonus;
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –±–∞—Ñ–æ–≤ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (variable_global_exists("update_companion_buff_system")) {
        update_companion_buff_system();
    }
    var agility_bonus = item_data[? "agility_bonus"];
    if (!is_undefined(agility_bonus)) global.hero.equipment_bonuses.agility -= agility_bonus;
    
    var intelligence_bonus = item_data[? "intelligence_bonus"];
    if (!is_undefined(intelligence_bonus)) global.hero.equipment_bonuses.intelligence -= intelligence_bonus;
    
    var defense_bonus = item_data[? "defense_bonus"];
    if (!is_undefined(defense_bonus)) global.hero.equipment_bonuses.defense -= defense_bonus;
    
    var max_health_bonus = item_data[? "max_health_bonus"];
    if (!is_undefined(max_health_bonus)) global.hero.equipment_bonuses.max_health -= max_health_bonus;
    
    var gold_bonus = item_data[? "gold_bonus"];
    if (!is_undefined(gold_bonus)) global.hero.equipment_bonuses.gold_bonus -= gold_bonus;
    
    var health_bonus = item_data[? "health_bonus"];
    if (!is_undefined(health_bonus)) global.hero.equipment_bonuses.health_bonus -= health_bonus;
    
    // –£–ë–ò–†–ê–ï–ú –ü–ï–†–ú–ê–ù–ï–ù–¢–ù–´–ï –ë–û–ù–£–°–´
    var perm_strength = item_data[? "perm_strength"];
    if (!is_undefined(perm_strength)) {
        global.hero.equipment_bonuses.perm_strength -= perm_strength;
        global.hero.strength -= perm_strength;
    }
    
    var perm_intelligence = item_data[? "perm_intelligence"];
    if (!is_undefined(perm_intelligence)) {
        global.hero.equipment_bonuses.perm_intelligence -= perm_intelligence;
        global.hero.intelligence -= perm_intelligence;
    }
    
    var perm_agility = item_data[? "perm_agility"];
    if (!is_undefined(perm_agility)) {
        global.hero.equipment_bonuses.perm_agility -= perm_agility;
        global.hero.agility -= perm_agility;
    }
    
    // –°–ù–ò–ú–ê–ï–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´ –ê–†–¢–ï–§–ê–ö–¢–û–í
    remove_artifact_effects(item_id);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    if (!AddItemToInventory(item_id, 1)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø–æ–ª–æ–Ω.");
        return false;
    }
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã
    if (variable_global_exists("calculate_companion_bonuses")) {
        calculate_companion_bonuses();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    if (variable_global_exists("update_hero_max_health")) {
        update_hero_max_health();
    }
    
    // –û—á–∏—â–∞–µ–º —Å–ª–æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    variable_struct_set(global.equipment_slots[character_index], slot_type, -1);
    
    add_notification("–°–Ω—è—Ç–æ: " + item_data[? "name"]);
    
    return true;
}

function RemoveItemFromInventory(_itemId, _quantity) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    if (!variable_global_exists("playerInventory") || !ds_exists(global.playerInventory, ds_type_list)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        return false;
    }
    
    var _totalRemoved = 0; // –°—á—ë—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    var i = 0;
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é
    while (i < ds_list_size(global.playerInventory) && _totalRemoved < _quantity) {
        var _invItem = ds_list_find_value(global.playerInventory, i);
        
        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        if (!is_undefined(_invItem) && _invItem[? "id"] == _itemId) {
            var _itemQuantity = _invItem[? "quantity"];
            var _removeAmount = min(_quantity - _totalRemoved, _itemQuantity);
            
            if (_removeAmount == _itemQuantity) {
                // –£–¥–∞–ª—è–µ–º –≤–µ—Å—å —Å—Ç–∞–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                ds_map_destroy(_invItem); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
                ds_list_delete(global.playerInventory, i);
                // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º i, —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–º–µ—Å—Ç–∏–ª–∏—Å—å
            } else {
                // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å—Ç–∞–∫–µ
                _invItem[? "quantity"] = _itemQuantity - _removeAmount;
                i++; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            }
            
            _totalRemoved += _removeAmount;
        } else {
            i++; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    return _totalRemoved == _quantity;
}

function GetItemCount(_itemId) {
    if (!variable_global_exists("playerInventory") || !ds_exists(global.playerInventory, ds_type_list)) {
        return 0;
    }
    
    var _total = 0;
    for (var i = 0; i < ds_list_size(global.playerInventory); i++) {
        var _invItem = ds_list_find_value(global.playerInventory, i);
        if (!is_undefined(_invItem) && _invItem[? "id"] == _itemId) {
            _total += _invItem[? "quantity"];
        }
    }
    return _total;
}

// scr_inventory_system.gml - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é use_potion

function use_potion(p_item_id) {
    var item_data = ds_map_find_value(global.ItemDB, p_item_id);
    if (item_data == -1) {
        show_debug_message("–û—à–∏–±–∫–∞: –ü—Ä–µ–¥–º–µ—Ç —Å ID " + string(p_item_id) + " –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return false;
    }
    
    var item_type = item_data[? "type"];
    var item_name = item_data[? "name"];
    
    if (item_type == global.ITEM_TYPE.POTION) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–µ–ª–∏–π
        var used = false;
        
        // –ó–µ–ª—å—è –∑–¥–æ—Ä–æ–≤—å—è
        if (item_data[? "health"] > 0) {
            var heal_value = item_data[? "health"];
            var actual_healing = hero_heal(heal_value);
            add_notification("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ " + item_name + "! +" + string(actual_healing) + " HP");
            used = true;
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞—Ñ—ã –æ—Ç –∑–µ–ª–∏–π
        else if (item_data[? "temp_strength"] > 0) {
            var bonus = item_data[? "temp_strength"];
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞—Ñ —Å–∏–ª—ã
            var temp_buff = {
                name: "üí™ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏–ª–∞",
                description: "–í—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É",
                icon: "üí™",
                type: global.BUFF_TYPES.TEMP_STRENGTH,
                value: bonus,
                duration: 1800, // 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ 60 FPS
                start_time: global.frame_count,
                color: make_color_rgb(255, 100, 100)
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–∞—Ñ–æ–≤
            if (!variable_global_exists("temp_buffs")) {
                global.temp_buffs = [];
            }
            array_push(global.temp_buffs, temp_buff);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å—Ä–∞–∑—É
            apply_temp_buff_effect(temp_buff);
            
            add_notification("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ " + item_name + "! +" + string(bonus) + " –∫ —Å–∏–ª–µ –Ω–∞ 30 —Å–µ–∫");
            used = true;
        }
        else if (item_data[? "temp_agility"] > 0) {
            var bonus = item_data[? "temp_agility"];
            var temp_buff = {
                name: "‚ö° –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–æ–≤–∫–æ—Å—Ç—å",
                description: "–í—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ª–æ–≤–∫–æ—Å—Ç—å",
                icon: "‚ö°",
                type: global.BUFF_TYPES.TEMP_AGILITY,
                value: bonus,
                duration: 1800,
                start_time: global.frame_count,
                color: make_color_rgb(100, 255, 100)
            };
            
            if (!variable_global_exists("temp_buffs")) {
                global.temp_buffs = [];
            }
            array_push(global.temp_buffs, temp_buff);
            apply_temp_buff_effect(temp_buff);
            
            add_notification("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ " + item_name + "! +" + string(bonus) + " –∫ –ª–æ–≤–∫–æ—Å—Ç–∏ –Ω–∞ 30 —Å–µ–∫");
            used = true;
        }
        else if (item_data[? "temp_intelligence"] > 0) {
            var bonus = item_data[? "temp_intelligence"];
            var temp_buff = {
                name: "üß† –í—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                description: "–í—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                icon: "üß†",
                type: global.BUFF_TYPES.TEMP_INTELLIGENCE,
                value: bonus,
                duration: 1800,
                start_time: global.frame_count,
                color: make_color_rgb(100, 100, 255)
            };
            
            if (!variable_global_exists("temp_buffs")) {
                global.temp_buffs = [];
            }
            array_push(global.temp_buffs, temp_buff);
            apply_temp_buff_effect(temp_buff);
            
            add_notification("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ " + item_name + "! +" + string(bonus) + " –∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –Ω–∞ 30 —Å–µ–∫");
            used = true;
        }
        else if (item_data[? "temp_defense"] > 0) {
            var bonus = item_data[? "temp_defense"];
            var temp_buff = {
                name: "üõ°Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞",
                description: "–í—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É",
                icon: "üõ°Ô∏è",
                type: global.BUFF_TYPES.TEMP_DEFENSE,
                value: bonus,
                duration: 1800,
                start_time: global.frame_count,
                color: make_color_rgb(150, 150, 255)
            };
            
            if (!variable_global_exists("temp_buffs")) {
                global.temp_buffs = [];
            }
            array_push(global.temp_buffs, temp_buff);
            apply_temp_buff_effect(temp_buff);
            
            add_notification("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ " + item_name + "! +" + string(bonus) + " –∫ –∑–∞—â–∏—Ç–µ –Ω–∞ 30 —Å–µ–∫");
            used = true;
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–µ–ª—å—è –¥–ª—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π
        else if (item_data[? "expedition_success_bonus"] > 0) {
            var bonus = item_data[? "expedition_success_bonus"];
            // –°–æ–∑–¥–∞–µ–º –±–∞—Ñ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
            var expedition_buff = {
                name: item_name,
                description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏",
                icon: "üéØ",
                type: global.BUFF_TYPES.SUCCESS,
                value: bonus,
                duration: 1, // –Ω–∞ –æ–¥–Ω—É —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é
                color: make_color_rgb(255, 255, 100)
            };
            
            array_push(global.active_buffs, expedition_buff);
            add_notification("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ " + item_name + "! +" + string(bonus) + "% –∫ —à–∞–Ω—Å—É —É—Å–ø–µ—Ö–∞ —Å–ª–µ–¥—É—é—â–µ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏");
            used = true;
        }
        else if (item_data[? "expedition_gold_bonus"] > 0) {
            var bonus = item_data[? "expedition_gold_bonus"];
            var expedition_buff = {
                name: item_name,
                description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º–æ–µ –∑–æ–ª–æ—Ç–æ",
                icon: "üí∞",
                type: global.BUFF_TYPES.GOLD,
                value: bonus,
                duration: 1,
                color: make_color_rgb(255, 215, 0)
            };
            
            array_push(global.active_buffs, expedition_buff);
            add_notification("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ " + item_name + "! +" + string(bonus) + "% –∫ –∑–æ–ª–æ—Ç—É —Å–ª–µ–¥—É—é—â–µ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏");
            used = true;
        }
        
        if (used) {
            // –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            RemoveItemFromInventory(p_item_id, 1);
            return true;
        }
        
    } else if (item_type == global.ITEM_TYPE.SCROLL) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∏—Ç–∫–æ–≤
        var used = false;
        
        if (item_data[? "instant_complete"] == true) {
            if (global.expedition.active) {
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é
                global.expedition.progress = global.expedition.duration;
                add_notification("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω " + item_name + "! –≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
                used = true;
            } else {
                add_notification("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–≤–∏—Ç–∫–∞!");
            }
        }
        else if (item_data[? "defense_multiplier"] > 0) {
            var multiplier = item_data[? "defense_multiplier"];
            var bonus_percent = (multiplier - 1) * 100;
            
            var expedition_buff = {
                name: item_name,
                description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –Ω–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é",
                icon: "üõ°Ô∏è",
                type: global.BUFF_TYPES.DEFENSE,
                value: bonus_percent,
                duration: 1,
                color: make_color_rgb(100, 150, 255)
            };
            
            array_push(global.active_buffs, expedition_buff);
            add_notification("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω " + item_name + "! +" + string(round(bonus_percent)) + "% –∫ –∑–∞—â–∏—Ç–µ –Ω–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é");
            used = true;
        }
        else if (item_data[? "reward_multiplier"] > 0) {
            var multiplier = item_data[? "reward_multiplier"];
            var bonus_percent = (multiplier - 1) * 100;
            
            var expedition_buff = {
                name: item_name,
                description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é",
                icon: "üí∞",
                type: global.BUFF_TYPES.GOLD,
                value: bonus_percent,
                duration: 1,
                color: make_color_rgb(255, 215, 0)
            };
            
            array_push(global.active_buffs, expedition_buff);
            add_notification("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω " + item_name + "! +" + string(round(bonus_percent)) + "% –∫ –Ω–∞–≥—Ä–∞–¥–µ");
            used = true;
        }
        else if (item_data[? "expedition_speed"] > 0) {
            var speed_bonus = item_data[? "expedition_speed"];
            
            var expedition_buff = {
                name: item_name,
                description: "–£—Å–∫–æ—Ä—è–µ—Ç —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é",
                icon: "‚ö°",
                type: global.BUFF_TYPES.SPEED,
                value: speed_bonus,
                duration: 1,
                color: make_color_rgb(100, 255, 100)
            };
            
            array_push(global.active_buffs, expedition_buff);
            add_notification("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω " + item_name + "! –≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ " + string(round((1 - speed_bonus) * 100)) + "% –±—ã—Å—Ç—Ä–µ–µ");
            used = true;
        }
        
        if (used) {
            // –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            RemoveItemFromInventory(p_item_id, 1);
            return true;
        }
    }
    
    // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    add_notification("–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: " + item_name);
    return false;
}
// scr_init_item_database.gml

function scr_init_item_database() {
    show_debug_message("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤...");
    
    global.ItemDB = ds_map_create();

    // –¢–∏–ø—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    global.ITEM_TYPE = {
        WEAPON: 0,
        ARMOR: 1,
        POTION: 2,
        RESOURCE: 3,
        ACCESSORY: 4,
        SCROLL: 5,
        RELIC: 6
    };

    // –°–ª–æ—Ç—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    global.EQUIP_SLOT = {
        WEAPON: 0,
        ARMOR: 1,
        ACCESSORY: 2,
        RELIC: 3
    };

    // ==================== –ü–†–ï–î–ú–ï–¢–´ –î–õ–Ø –ù–ê–ß–ê–õ–ê –ò–ì–†–´ (–£–†–û–í–ù–ò 1-10) ====================
    
    // –ü—Ä–æ—Å—Ç–æ–µ –æ—Ä—É–∂–∏–µ
    AddItemToDB("wooden_sword", "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á", global.ITEM_TYPE.WEAPON, 50, "–ü—Ä–æ—Å—Ç–æ–µ –æ—Ä—É–∂–∏–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.", 2, 0, 0, global.EQUIP_SLOT.WEAPON, 0);
    AddItemToDB("apprentice_staff", "–ü–æ—Å–æ—Ö —É—á–µ–Ω–∏–∫–∞", global.ITEM_TYPE.WEAPON, 60, "–ë–∞–∑–æ–≤—ã–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö.", 0, 3, 0, global.EQUIP_SLOT.WEAPON, 0);
    AddItemToDB("hunting_bow", "–û—Ö–æ—Ç–Ω–∏—á–∏–π –ª—É–∫", global.ITEM_TYPE.WEAPON, 55, "–ü—Ä–æ—Å—Ç–æ–π –ª—É–∫ –¥–ª—è –æ—Ö–æ—Ç—ã.", 1, 0, 1, global.EQUIP_SLOT.WEAPON, 0);
    
    // –ë–∞–∑–æ–≤–∞—è –±—Ä–æ–Ω—è
    AddItemToDB("cloth_robe", "–¢–∫–∞–Ω–µ–≤–∞—è —Ä–æ–±–∞", global.ITEM_TYPE.ARMOR, 40, "–ü—Ä–æ—Å—Ç–∞—è —Ä–æ–±–∞ –Ω–æ–≤–∏—á–∫–∞.", 0, 1, 2, global.EQUIP_SLOT.ARMOR, 0);
    AddItemToDB("leather_helmet", "–ö–æ–∂–∞–Ω—ã–π —à–ª–µ–º", global.ITEM_TYPE.ARMOR, 45, "–ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –≥–æ–ª–æ–≤—ã.", 0, 0, 3, global.EQUIP_SLOT.ARMOR, 0);
    AddItemToDB("traveler_boots", "–°–∞–ø–æ–≥–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞", global.ITEM_TYPE.ARMOR, 35, "–£–¥–æ–±–Ω—ã–µ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Ö–æ–¥–æ–≤.", 0, 0, 1, global.EQUIP_SLOT.ARMOR, 0);
    
    // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
    AddItemToDB("novice_ring", "–ö–æ–ª—å—Ü–æ –Ω–æ–≤–∏—á–∫–∞", global.ITEM_TYPE.ACCESSORY, 80, "–ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∫–æ –≤—Å–µ–º –∞—Ç—Ä–∏–±—É—Ç–∞–º.", 1, 1, 1, global.EQUIP_SLOT.ACCESSORY, 0);
    AddItemToDB("lucky_charm", "–¢–∞–ª–∏—Å–º–∞–Ω —É–¥–∞—á–∏", global.ITEM_TYPE.ACCESSORY, 70, "–ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É–¥–∞—á—É.", 0, 0, 0, global.EQUIP_SLOT.ACCESSORY, 0);
    AddItemToDB("health_amulet", "–ê–º—É–ª–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è", global.ITEM_TYPE.ACCESSORY, 90, "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.", 0, 0, 0, global.EQUIP_SLOT.ACCESSORY, 0);

    // ==================== –ü–†–ï–î–ú–ï–¢–´ –°–†–ï–î–ù–ï–ô –ò–ì–†–´ (–£–†–û–í–ù–ò 10-20) ====================
    
    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ
    AddItemToDB("iron_sword", "–ñ–µ–ª–µ–∑–Ω—ã–π –º–µ—á", global.ITEM_TYPE.WEAPON, 200, "–ù–∞–¥–µ–∂–Ω–æ–µ –∂–µ–ª–µ–∑–Ω–æ–µ –æ—Ä—É–∂–∏–µ.", 5, 0, 0, global.EQUIP_SLOT.WEAPON, 1);
    AddItemToDB("mage_wand", "–í–æ–ª—à–µ–±–Ω–∞—è –ø–∞–ª–æ—á–∫–∞", global.ITEM_TYPE.WEAPON, 220, "–£—Å–∏–ª–∏–≤–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.", 0, 6, 0, global.EQUIP_SLOT.WEAPON, 1);
    AddItemToDB("composite_bow", "–ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –ª—É–∫", global.ITEM_TYPE.WEAPON, 210, "–ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∏ –º–æ—â–Ω—ã–π –ª—É–∫.", 3, 0, 2, global.EQUIP_SLOT.WEAPON, 1);
    
    // –°—Ä–µ–¥–Ω—è—è –±—Ä–æ–Ω—è
    AddItemToDB("chain_armor", "–ö–æ–ª—å—á—É–∂–Ω–∞—è –±—Ä–æ–Ω—è", global.ITEM_TYPE.ARMOR, 180, "–•–æ—Ä–æ—à–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∞—Ç–∞–∫.", 0, 0, 8, global.EQUIP_SLOT.ARMOR, 1);
    AddItemToDB("mage_robe", "–ú–∞–Ω—Ç–∏—è –º–∞–≥–∞", global.ITEM_TYPE.ARMOR, 190, "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫—É—é —Å–∏–ª—É.", 0, 4, 3, global.EQUIP_SLOT.ARMOR, 1);
    AddItemToDB("ranger_cloak", "–ü–ª–∞—â —Å–ª–µ–¥–æ–ø—ã—Ç–∞", global.ITEM_TYPE.ARMOR, 170, "–ü–æ–º–æ–≥–∞–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–º.", 2, 2, 4, global.EQUIP_SLOT.ARMOR, 1);
    
    // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    AddItemToDB("warrior_bracelet", "–ë—Ä–∞—Å–ª–µ—Ç –≤–æ–∏–Ω–∞", global.ITEM_TYPE.ACCESSORY, 250, "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Å–∏–ª—É.", 4, 0, 0, global.EQUIP_SLOT.ACCESSORY, 1);
    AddItemToDB("sage_earring", "–°–µ—Ä—å–≥–∞ –º—É–¥—Ä–µ—Ü–∞", global.ITEM_TYPE.ACCESSORY, 260, "–£—Å–∏–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç.", 0, 5, 0, global.EQUIP_SLOT.ACCESSORY, 1);
    AddItemToDB("guardian_pendant", "–ö—É–ª–æ–Ω –∑–∞—â–∏—Ç–Ω–∏–∫–∞", global.ITEM_TYPE.ACCESSORY, 240, "–ü–æ–≤—ã—à–∞–µ—Ç –∑–∞—â–∏—Ç—É.", 0, 0, 6, global.EQUIP_SLOT.ACCESSORY, 1);

    // ==================== –†–ï–î–ö–ò–ï –ü–†–ï–î–ú–ï–¢–´ –° –£–ù–ò–ö–ê–õ–¨–ù–´–ú–ò –ë–ê–§–ê–ú–ò ====================
    
    // –†–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –Ω–æ–≤—ã–µ –±–∞—Ñ—ã –ø–æ–º–æ—â–Ω–∏—Ü–∞–º
    AddItemToDB("hepo_ancient_tome", "–î—Ä–µ–≤–Ω–∏–π —Ñ–æ–ª–∏–∞–Ω—Ç –•—ç–ø–æ", global.ITEM_TYPE.ACCESSORY, 1500, "–•—ç–ø–æ –∏–∑—É—á–∞–µ—Ç –¥—Ä–µ–≤–Ω–∏–µ —Ç–∞–∫—Ç–∏–∫–∏. –ë–ê–§: +20% –∫ —à–∞–Ω—Å—É —É—Å–ø–µ—Ö–∞", 0, 8, 0, global.EQUIP_SLOT.ACCESSORY, 2);
    AddItemToDB("fatty_energy_crystal", "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª –§—ç—Ç—Ç–∏", global.ITEM_TYPE.ACCESSORY, 1600, "–§—ç—Ç—Ç–∏ —á–µ—Ä–ø–∞–µ—Ç —Å–∏–ª—ã –∏–∑ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞. –ë–ê–§: +30% –∫ –∑–¥–æ—Ä–æ–≤—å—é –æ—Ç—Ä—è–¥–∞", 0, 0, 10, global.EQUIP_SLOT.ACCESSORY, 2);
    AddItemToDB("discipline_golden_scale", "–ó–æ–ª–æ—Ç—ã–µ –≤–µ—Å—ã –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", global.ITEM_TYPE.ACCESSORY, 1550, "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–µ —Å–¥–µ–ª–∫–∏. –ë–ê–§: +25% –∫ –ø–æ–ª—É—á–∞–µ–º–æ–º—É –∑–æ–ª–æ—Ç—É", 0, 6, 0, global.EQUIP_SLOT.ACCESSORY, 2);
    
    // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –º–æ—â–Ω—ã–º–∏ –±–∞—Ñ–∞–º–∏
    AddItemToDB("trinity_medallion", "–ú–µ–¥–∞–ª—å–æ–Ω –¢—Ä–æ–∏—Ü—ã", global.ITEM_TYPE.ACCESSORY, 5000, "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–∏–ª—ã –≤—Å–µ—Ö –ø–æ–º–æ—â–Ω–∏—Ü. –ë–ê–§: –í—Å–µ –±–∞—Ñ—ã —É—Å–∏–ª–∏–≤–∞—é—Ç—Å—è –Ω–∞ 50%", 5, 5, 5, global.EQUIP_SLOT.ACCESSORY, 3);
    AddItemToDB("expedition_compass", "–ö–æ–º–ø–∞—Å —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π", global.ITEM_TYPE.ACCESSORY, 4500, "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å. –ë–ê–§: -40% –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏", 0, 0, 0, global.EQUIP_SLOT.ACCESSORY, 3);
    AddItemToDB("lucky_dice", "–ö–æ—Å—Ç–∏ —É–¥–∞—á–∏", global.ITEM_TYPE.ACCESSORY, 4800, "–ü—Ä–∏–Ω–æ—Å—è—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—É—é —É–¥–∞—á—É. –ë–ê–§: –®–∞–Ω—Å —É–¥–≤–æ–∏—Ç—å –≤—Å—é –Ω–∞–≥—Ä–∞–¥—É", 0, 0, 0, global.EQUIP_SLOT.ACCESSORY, 3);

    // ==================== –ú–û–©–ù–´–ï –ü–†–ï–î–ú–ï–¢–´ –î–õ–Ø –ü–û–ó–î–ù–ï–ô –ò–ì–†–´ ====================
    
    // –≠–ø–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ
    AddItemToDB("dragon_slayer", "–£–±–∏–π—Ü–∞ –¥—Ä–∞–∫–æ–Ω–æ–≤", global.ITEM_TYPE.WEAPON, 5000, "–ú–µ—á, –ø—Ä–æ–ø–∏—Ç–∞–Ω–Ω—ã–π –∫—Ä–æ–≤—å—é –¥—Ä–∞–∫–æ–Ω–æ–≤.", 25, 0, 0, global.EQUIP_SLOT.WEAPON, 3);
    AddItemToDB("staff_of_wisdom", "–ü–æ—Å–æ—Ö –º—É–¥—Ä–æ—Å—Ç–∏", global.ITEM_TYPE.WEAPON, 7500, "–£—Å–∏–ª–∏–≤–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.", 5, 25, 5, global.EQUIP_SLOT.WEAPON, 3);
    AddItemToDB("bow_of_accuracy", "–õ—É–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏", global.ITEM_TYPE.WEAPON, 6000, "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è.", 15, 0, 0, global.EQUIP_SLOT.WEAPON, 3);

    // –≠–ø–∏—á–µ—Å–∫–∞—è –±—Ä–æ–Ω—è
    AddItemToDB("phantom_cloak", "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –ø–ª–∞—â", global.ITEM_TYPE.ARMOR, 8000, "–î–µ–ª–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ–≤–∏–¥–∏–º—ã–º.", 0, 15, 20, global.EQUIP_SLOT.ARMOR, 3);
    AddItemToDB("titan_armor", "–î–æ—Å–ø–µ—Ö —Ç–∏—Ç–∞–Ω–∞", global.ITEM_TYPE.ARMOR, 12000, "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ—á–Ω–∞—è –±—Ä–æ–Ω—è.", 10, 0, 40, global.EQUIP_SLOT.ARMOR, 3);

    // –≠–ø–∏—á–µ—Å–∫–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
    AddItemToDB("ring_of_power", "–ö–æ–ª—å—Ü–æ —Å–∏–ª—ã", global.ITEM_TYPE.ACCESSORY, 10000, "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.", 10, 10, 10, global.EQUIP_SLOT.ACCESSORY, 3);
    AddItemToDB("amulet_of_immortality", "–ê–º—É–ª–µ—Ç –±–µ—Å—Å–º–µ—Ä—Ç–∏—è", global.ITEM_TYPE.ACCESSORY, 25000, "–î–∞—Ä—É–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ä—Ç–∏.", 0, 20, 15, global.EQUIP_SLOT.ACCESSORY, 3);

    // ==================== –ó–ï–õ–¨–Ø –ò –°–í–ò–¢–ö–ò ====================
    
    // –ë–∞–∑–æ–≤—ã–µ –∑–µ–ª—å—è
    AddItemToDB("health_potion", "–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", global.ITEM_TYPE.POTION, 50, "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 50 HP.", 0, 0, 0, -1, 0, true, 10);
    AddItemToDB("greater_healing", "–°–∏–ª—å–Ω–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", global.ITEM_TYPE.POTION, 120, "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 120 HP.", 0, 0, 0, -1, 1, true, 5);
    AddItemToDB("elixir_of_life", "–≠–ª–∏–∫—Å–∏—Ä –∂–∏–∑–Ω–∏", global.ITEM_TYPE.POTION, 300, "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 300 HP.", 0, 0, 0, -1, 2, true, 3);
    
    // –ó–µ–ª—å—è –±–∞—Ñ–æ–≤
    AddItemToDB("potion_of_strength", "–ó–µ–ª—å–µ —Å–∏–ª—ã", global.ITEM_TYPE.POTION, 200, "+5 –∫ —Å–∏–ª–µ –Ω–∞ 1 —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é.", 0, 0, 0, -1, 1, true, 5);
    AddItemToDB("potion_of_intellect", "–ó–µ–ª—å–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞", global.ITEM_TYPE.POTION, 200, "+5 –∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –Ω–∞ 1 —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é.", 0, 0, 0, -1, 1, true, 5);
    AddItemToDB("potion_of_protection", "–ó–µ–ª—å–µ –∑–∞—â–∏—Ç—ã", global.ITEM_TYPE.POTION, 200, "+5 –∫ –∑–∞—â–∏—Ç–µ –Ω–∞ 1 —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é.", 0, 0, 0, -1, 1, true, 5);

    // –°–≤–∏—Ç–∫–∏
    AddItemToDB("scroll_teleport", "–°–≤–∏—Ç–æ–∫ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏", global.ITEM_TYPE.SCROLL, 400, "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é.", 0, 0, 0, -1, 2, true, 3);
    AddItemToDB("scroll_protection", "–°–≤–∏—Ç–æ–∫ –∑–∞—â–∏—Ç—ã", global.ITEM_TYPE.SCROLL, 350, "+50% –∑–∞—â–∏—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é.", 0, 0, 0, -1, 1, true, 5);
    AddItemToDB("scroll_fortune", "–°–≤–∏—Ç–æ–∫ —É–¥–∞—á–∏", global.ITEM_TYPE.SCROLL, 500, "–£–¥–≤–∞–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Å–ª–µ–¥—É—é—â—É—é —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é.", 0, 0, 0, -1, 2, true, 2);
// –ó–µ–ª—å—è –¥–ª—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π
AddItemToDB("potion_of_success", "–ó–µ–ª—å–µ —É—Å–ø–µ—Ö–∞", global.ITEM_TYPE.POTION, 300, "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞ —Å–ª–µ–¥—É—é—â–µ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏.", 0, 0, 0, -1, 1, true, 3);
AddItemToDB("potion_of_gold", "–ó–æ–ª–æ—Ç–æ–µ –∑–µ–ª—å–µ", global.ITEM_TYPE.POTION, 350, "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–æ–ª–æ—Ç–æ —Å —Å–ª–µ–¥—É—é—â–µ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏.", 0, 0, 0, -1, 1, true, 3);

// –°–≤–∏—Ç–æ–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏
AddItemToDB("scroll_haste", "–°–≤–∏—Ç–æ–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏", global.ITEM_TYPE.SCROLL, 600, "–£—Å–∫–æ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏.", 0, 0, 0, -1, 2, true, 2);
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∑–µ–ª–∏–π –∏ —Å–≤–∏—Ç–∫–æ–≤
    AddItemProperties();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –±–∞—Ñ–∞–º–∏
    AddCompanionBuffProperties();
    
    show_debug_message("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: " + string(ds_map_size(global.ItemDB)) + " –ø—Ä–µ–¥–º–µ—Ç–æ–≤");
}

function AddCompanionBuffProperties() {
    // –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –±–∞—Ñ—ã –ø–æ–º–æ—â–Ω–∏—Ü–∞–º
    
    // –ü—Ä–µ–¥–º–µ—Ç—ã –•—ç–ø–æ
    SetItemProperty("hepo_ancient_tome", "companion_buff", "hepo_success");
    SetItemProperty("hepo_ancient_tome", "buff_power", 20);
    
    // –ü—Ä–µ–¥–º–µ—Ç—ã –§—ç—Ç—Ç–∏
    SetItemProperty("fatty_energy_crystal", "companion_buff", "fatty_health");
    SetItemProperty("fatty_energy_crystal", "buff_power", 30);
    
    // –ü—Ä–µ–¥–º–µ—Ç—ã –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    SetItemProperty("discipline_golden_scale", "companion_buff", "discipline_gold");
    SetItemProperty("discipline_golden_scale", "buff_power", 25);
    
    // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    SetItemProperty("trinity_medallion", "companion_buff", "all_buffs_boost");
    SetItemProperty("trinity_medallion", "buff_power", 50);
    
    SetItemProperty("expedition_compass", "companion_buff", "expedition_speed");
    SetItemProperty("expedition_compass", "buff_power", 40);
    
    SetItemProperty("lucky_dice", "companion_buff", "double_rewards");
    SetItemProperty("lucky_dice", "buff_power", 15); // 15% —à–∞–Ω—Å
}

function AddItemToDB(_id, _name, _type, _price, _desc, _str_bonus, _int_bonus, _def_bonus, _equip_slot, _rarity, _stackable = false, _maxStack = 1) {
    var item = ds_map_create();
    
    ds_map_add(item, "id", _id);
    ds_map_add(item, "name", _name);
    ds_map_add(item, "type", _type);
    ds_map_add(item, "price", _price);
    ds_map_add(item, "description", _desc);
    ds_map_add(item, "strength_bonus", _str_bonus);
    ds_map_add(item, "intelligence_bonus", _int_bonus);
    ds_map_add(item, "defense_bonus", _def_bonus);
    ds_map_add(item, "equip_slot", _equip_slot);
    ds_map_add(item, "rarity", _rarity);
    ds_map_add(item, "stackable", _stackable);
    ds_map_add(item, "maxStack", _maxStack);
    
    ds_map_add(global.ItemDB, _id, item);
}

// scr_init_item_database.gml - –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é AddItemProperties

function AddItemProperties() {
    // –ó–µ–ª—å—è –∑–¥–æ—Ä–æ–≤—å—è
    SetItemProperty("health_potion", "health", 50);
    SetItemProperty("greater_healing", "health", 120);
    SetItemProperty("elixir_of_life", "health", 300);
    
    // –ó–µ–ª—å—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–∞—Ñ–æ–≤
    SetItemProperty("potion_of_strength", "temp_strength", 5);
    SetItemProperty("potion_of_intellect", "temp_intelligence", 5);
    SetItemProperty("potion_of_protection", "temp_defense", 5);
    
    // –ó–µ–ª—å—è –¥–ª—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π
    SetItemProperty("potion_of_success", "expedition_success_bonus", 15);
    SetItemProperty("potion_of_gold", "expedition_gold_bonus", 20);
    
    // –°–≤–∏—Ç–∫–∏
    SetItemProperty("scroll_teleport", "instant_complete", true);
    SetItemProperty("scroll_protection", "defense_multiplier", 1.5);
    SetItemProperty("scroll_fortune", "reward_multiplier", 2.0);
    SetItemProperty("scroll_haste", "expedition_speed", 0.7);
}

function SetItemProperty(item_id, property, value) {
    var item_data = ds_map_find_value(global.ItemDB, item_id);
    if (item_data != undefined) {
        ds_map_add(item_data, property, value);
    }
}
function debug_shop_items() {
    if (!variable_global_exists("shop_items") || !variable_global_exists("current_shop_page_items")) return;
    
    show_debug_message("=== –î–ï–ë–ê–ì –ú–ê–ì–ê–ó–ò–ù–ê ===");
    show_debug_message("–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: " + string(array_length(global.shop_items)));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    for (var i = 0; i < array_length(global.shop_items); i++) {
        var item_id = global.shop_items[i];
        var item_data = ds_map_find_value(global.ItemDB, item_id);
        if (item_data != -1) {
            show_debug_message("–ú–∞–≥–∞–∑–∏–Ω[" + string(i) + "]: " + item_data[? "name"] + " (ID: " + item_id + ")");
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    show_debug_message("--- –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ---");
    for (var i = 0; i < array_length(global.current_shop_page_items); i++) {
        var item_info = global.current_shop_page_items[i];
        var item_data = ds_map_find_value(global.ItemDB, item_info.item_id);
        if (item_data != -1) {
            show_debug_message("–°—Ç—Ä–∞–Ω–∏—Ü–∞[" + string(i) + "]: " + item_data[? "name"] + " (ID: " + item_info.item_id + ")");
        }
    }
    show_debug_message("=====================");
}
// scr_shop_system.gml
// –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞–≥–∞–∑–∏–Ω–∞

global.shop_categories = ["WEAPONS", "ARMOR", "POTIONS", "SPECIAL"];
global.shop_current_category = 0;
global.shop_reputation = 0;
global.shop_reputation_level = 0;
global.shop_daily_deals = [];
global.shop_last_refresh = 0;

// scr_shop_system.gml
// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

function init_shop_system() {
    show_debug_message("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∞–≥–∞–∑–∏–Ω–∞...");
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ 5
    global.shop_categories = ["WEAPONS", "ARMOR", "POTIONS", "SPECIAL", "DAILY_DEALS"];
    global.shop_current_category = 0;
    global.shop_reputation = 0;
    global.shop_reputation_level = 0;
    global.shop_daily_deals = [];
    global.shop_last_refresh = current_time;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π - —Ç–µ–ø–µ—Ä—å –¥–ª—è 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    global.shop_category_pages = [];
    global.shop_category_current_page = [];
    global.shop_items_per_category_page = 6;
    
    for (var i = 0; i < array_length(global.shop_categories); i++) {
        var category_items = get_shop_items_by_category(i);
        var total_pages = max(1, ceil(array_length(category_items) / global.shop_items_per_category_page));
        array_push(global.shop_category_pages, total_pages);
        array_push(global.shop_category_current_page, 0);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    init_daily_deals();
    
    show_debug_message("–°–∏—Å—Ç–µ–º–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: " + string(array_length(global.shop_categories)) + " –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
}

function get_shop_items_by_category(category_index) {
    var category_items = [];
    
    if (!variable_global_exists("ItemDB") || !ds_exists(global.ItemDB, ds_type_map)) {
        return category_items;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (5-—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
    if (category_index == 4) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        for (var i = 0; i < array_length(global.shop_daily_deals); i++) {
            array_push(category_items, global.shop_daily_deals[i].item_id);
        }
        return category_items;
    }
    
    var map = ds_map_create();
    var count = ds_map_size(global.ItemDB);
    var key = ds_map_find_first(global.ItemDB);
    
    for (var i = 0; i < count; i++) {
        var item = ds_map_find_value(global.ItemDB, key);
        var item_type = item[? "type"];
        var include_item = false;
        
        switch(category_index) {
            case 0: // WEAPONS
                include_item = (item_type == global.ITEM_TYPE.WEAPON);
                break;
            case 1: // ARMOR
                include_item = (item_type == global.ITEM_TYPE.ARMOR);
                break;
            case 2: // POTIONS
                include_item = (item_type == global.ITEM_TYPE.POTION || item_type == global.ITEM_TYPE.SCROLL);
                break;
            case 3: // SPECIAL
                include_item = (item[? "rarity"] >= 2); // –†–µ–¥–∫–∏–µ –∏ –≤—ã—à–µ
                break;
        }
        
        if (include_item) {
            array_push(category_items, key);
        }
        key = ds_map_find_next(global.ItemDB, key);
    }
    ds_map_destroy(map);
    
    return category_items;
}

function get_current_category_items() {
    // –ó–∞—â–∏—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (global.shop_current_category < 0 || global.shop_current_category >= array_length(global.shop_category_pages)) {
        global.shop_current_category = 0;
    }
    
    var category_items = get_shop_items_by_category(global.shop_current_category);
    var current_page = global.shop_category_current_page[global.shop_current_category];
    var items_per_page = global.shop_items_per_category_page;
    
    var start_index = current_page * items_per_page;
    var end_index = min(start_index + items_per_page, array_length(category_items));
    
    var current_page_items = [];
    for (var i = start_index; i < end_index; i++) {
        array_push(current_page_items, category_items[i]);
    }
    
    return current_page_items;
}
function change_shop_category_page(direction) {
    // –ó–∞—â–∏—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (global.shop_current_category < 0 || global.shop_current_category >= array_length(global.shop_category_pages)) {
        global.shop_current_category = 0;
    }
    
    var current_page = global.shop_category_current_page[global.shop_current_category];
    var total_pages = global.shop_category_pages[global.shop_current_category];
    
    if (direction == 1) { // –í–ø–µ—Ä–µ–¥
        if (current_page < total_pages - 1) {
            global.shop_category_current_page[global.shop_current_category] = current_page + 1;
        }
    } else if (direction == -1) { // –ù–∞–∑–∞–¥
        if (current_page > 0) {
            global.shop_category_current_page[global.shop_current_category] = current_page - 1;
        }
    }
}


function get_current_category_page_info() {
    // –ó–∞—â–∏—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (global.shop_current_category < 0 || global.shop_current_category >= array_length(global.shop_category_pages)) {
        global.shop_current_category = 0;
    }
    
    var current_page = global.shop_category_current_page[global.shop_current_category];
    var total_pages = global.shop_category_pages[global.shop_current_category];
    var category_items = get_shop_items_by_category(global.shop_current_category);
    var total_items = array_length(category_items);
    var start_item = current_page * global.shop_items_per_category_page + 1;
    var end_item = min((current_page + 1) * global.shop_items_per_category_page, total_items);
    
    return {
        current_page: current_page + 1,
        total_pages: total_pages,
        total_items: total_items,
        start_item: start_item,
        end_item: end_item
    };
}

function calculate_discounted_price(item_id) {
    var item_data = ds_map_find_value(global.ItemDB, item_id);
    if (item_data == -1) return 0;
    
    var base_price = item_data[? "price"];
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ —Å–∫–∏–¥–æ–∫
    return base_price;
}

function add_shop_reputation(amount) {
    global.shop_reputation += amount;
}

function start_training(companion_index) {
    if (companion_index >= 0 && companion_index < array_length(global.companions)) {
        var companion = global.companions[companion_index];
        var arena = global.arenas[companion_index];
        
        if (companion.unlocked && !companion.training && arena.unlocked) {
            companion.training = true;
            companion.training_progress = 0;
            companion.last_training_time = current_time; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            arena.active = true;
            add_notification(companion.name + " –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!");
        }
    }
}

/// @function complete_training_early(companion_index)
/// @description –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ–º–æ—â–Ω–∏—Ü—ã –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –æ–ø—ã—Ç
/// @param {real} companion_index - –ò–Ω–¥–µ–∫—Å –ø–æ–º–æ—â–Ω–∏—Ü—ã –≤ –º–∞—Å—Å–∏–≤–µ global.companions
function complete_training_early(companion_index) {
    if (companion_index < 0 || companion_index >= array_length(global.companions)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–º–æ—â–Ω–∏—Ü—ã: " + string(companion_index));
        return false;
    }
    
    var companion = global.companions[companion_index];
    var arena = global.arenas[companion_index];
    
    if (!companion.training || !arena.active) {
        show_debug_message("–û—à–∏–±–∫–∞: –ü–æ–º–æ—â–Ω–∏—Ü–∞ –Ω–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!");
        return false;
    }
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –æ–ø—ã—Ç
    var exp_gained = companion.training_progress;
    if (exp_gained > 0) {
        add_companion_exp(companion_index, exp_gained);
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    companion.training = false;
    companion.training_progress = 0;
    arena.active = false;
    
    add_notification(companion.name + " –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! +" + string(exp_gained) + " –æ–ø—ã—Ç–∞");
    return true;
}

function update_trainings() {
    for (var i = 0; i < array_length(global.companions); i++) {
        var companion = global.companions[i];
        if (companion.training) {
            // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –æ–ø—ã—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É (–ø—Ä–∏ 60 FPS)
            companion.training_progress += companion.training_rate;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if (companion.training_progress >= 10) {
                var exp_to_add = floor(companion.training_progress);
                add_companion_exp(i, exp_to_add);
                companion.training_progress -= exp_to_add;
            }
        }
    }
}

/// @function add_companion_exp_in_expedition()
/// @description –î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—ã—Ç –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–º–æ—â–Ω–∏—Ü–∞–º –≤ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
function add_companion_exp_in_expedition() {
    if (!global.expedition.active) return;
    
    var base_exp = 5 * (global.expedition.difficulty + 1);
    
    for (var i = 0; i < array_length(global.companions); i++) {
        var companion = global.companions[i];
        // –î–∞–µ–º –æ–ø—ã—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–º–æ—â–Ω–∏—Ü–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –≤ –æ—Ç—Ä—è–¥–µ (–Ω–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ)
        if (companion.unlocked && !companion.training) {
            add_companion_exp(i, base_exp);
        }
    }
}

function stop_training(companion_index) {
    if (companion_index >= 0 && companion_index < array_length(global.companions)) {
        var companion = global.companions[companion_index];
        var arena = global.arenas[companion_index];
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if (companion.training_progress > 0) {
            add_companion_exp(companion_index, floor(companion.training_progress));
        }
        
        companion.training = false;
        companion.training_progress = 0;
        arena.active = false;
        add_notification(companion.name + " –≤–µ—Ä–Ω—É–ª–∞—Å—å –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
    }
}
// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
function complete_arena_training() {
    var companion_index = 0; // Hepo
    add_companion_exp(companion_index, 25);
    add_notification("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–µ Hepo –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    training_progress = 0;
    global.arena_training_active = false;
}
function point_in_rectangle(px, py, x1, y1, x2, y2) {
    return (px >= x1 && px <= x2 && py >= y1 && py <= y2);
}

function add_notification(message) {
    if (!variable_global_exists("notifications")) {
        global.notifications = [];
    }
    
    array_push(global.notifications, {
        message: message,
        timer: 360 // 3 —Å–µ–∫—É–Ω–¥—ã
    });
}
function get_rarity_name(rarity) {
    switch(rarity) {
        case 0: return "–û–±—ã—á–Ω—ã–π";
        case 1: return "–ù–µ–æ–±—ã—á–Ω—ã–π"; 
        case 2: return "–†–µ–¥–∫–∏–π";
        case 3: return "–≠–ø–∏—á–µ—Å–∫–∏–π";
        case 4: return "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π";
        case 5: return "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π";
        case 6: return "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π";
        case 7: return "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π";
        case 8: return "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π+";
        case 9: return "–ê–±—Å–æ–ª—é—Ç–Ω—ã–π";
        case 10: return "–ö–û–ù–¶–ï–ü–¢–£–ê–õ–¨–ù–´–ô";
        default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
}

function get_rainbow_color() {
    // –†–∞–¥—É–∂–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    var time = global.frame_count * 0.1;
    var r = (sin(time) * 127 + 128);
    var g = (sin(time + 2) * 127 + 128);
    var b = (sin(time + 4) * 127 + 128);
    return make_color_rgb(r, g, b);
}

function get_animated_divine_color() {
    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    var time = global.frame_count * 0.2;
    var pulse = (sin(time) * 0.5 + 0.5);
    return merge_color(make_color_rgb(255, 255, 0), make_color_rgb(255, 0, 0), pulse);
}

function merge_color(color1, color2, ratio) {
    var r1 = color_get_red(color1);
    var g1 = color_get_green(color1);
    var b1 = color_get_blue(color1);
    
    var r2 = color_get_red(color2);
    var g2 = color_get_green(color2);
    var b2 = color_get_blue(color2);
    
    var r = r1 + (r2 - r1) * ratio;
    var g = g1 + (g2 - g1) * ratio;
    var b = b1 + (b2 - b1) * ratio;
    
    return make_color_rgb(r, g, b);
}

/// @function sin(angle)
/// @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–Ω—É—Å —É–≥–ª–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
/// @param {real} angle - –£–≥–æ–ª –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
/// @return {real} –ó–Ω–∞—á–µ–Ω–∏–µ —Å–∏–Ω—É—Å–∞

function sin(angle) {
    return dsin(angle);
}

/// @function cos(angle)
/// @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Å–∏–Ω—É—Å —É–≥–ª–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
/// @param {real} angle - –£–≥–æ–ª –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
/// @return {real} –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–∞

function cos(angle) {
    return dcos(angle);
}
/// @function abs(value)
/// @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞
/// @param {real} value - –ß–∏—Å–ª–æ
/// @return {real} –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

function abs(value) {
    if (value < 0) return -value;
    return value;
}

/// @function clamp(value, min, max)
/// @description –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–∏–Ω–∏–º—É–º–æ–º –∏ –º–∞–∫—Å–∏–º—É–º–æ–º
/// @param {real} value - –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
/// @param {real} min - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
/// @param {real} max - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
/// @return {real} –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

function clamp(value, min, max) {
    if (value < min) return min;
    if (value > max) return max;
    return value;
}

/// @function max(a, b)
/// @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª
/// @param {real} a - –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
/// @param {real} b - –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
/// @return {real} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ

function max(a, b) {
    if (a > b) return a;
    return b;
}

/// @function min(a, b)
/// @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª
/// @param {real} a - –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
/// @param {real} b - –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
/// @return {real} –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ

function min(a, b) {
    if (a < b) return a;
    return b;
}

/// @function round(value)
/// @description –û–∫—Ä—É–≥–ª—è–µ—Ç —á–∏—Å–ª–æ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ
/// @param {real} value - –ß–∏—Å–ª–æ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
/// @return {real} –û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ

function round(value) {
    return floor(value + 0.5);
}
function wrap_text(text, max_width, font) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ max_width –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π
    if (string_length(text) == 0 || max_width < 10) {
        return text; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à—Ä–∏—Ñ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    if (font == -1) {
        font = fnt_main;
    }
    
    var words = string_split(text, " ");
    var current_line = "";
    var result = "";
    
    for (var i = 0; i < array_length(words); i++) {
        var test_line = current_line == "" ? words[i] : current_line + " " + words[i];
        var test_width = string_width_ext(test_line, -1, font);
        
        if (test_width <= max_width) {
            current_line = test_line;
        } else {
            if (current_line != "") {
                result += current_line + "\n";
            }
            current_line = words[i];
        }
    }
    
    if (current_line != "") {
        result += current_line;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–º–∞–∫—Å–∏–º—É–º 2)
    var lines = string_split(result, "\n");
    if (array_length(lines) > 2) {
        result = lines[0] + "\n" + string_copy(lines[1], 1, min(string_length(lines[1]), 30)) + "...";
    }
    
    return result;
}
/// @function array_join(array, separator)
/// @description –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
/// @param {array} array - –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
/// @param {string} separator - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
/// @return {string} –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

function array_join(array, separator) {
    if (array_length(array) == 0) return "";
    
    var result = array[0];
    for (var i = 1; i < array_length(array); i++) {
        result += separator + array[i];
    }
    return result;
}

/// @function string_split(string, delimiter)
/// @description –†–∞–∑–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é
/// @param {string} string - –°—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
/// @param {string} delimiter - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
/// @return {array} –ú–∞—Å—Å–∏–≤ –ø–æ–¥—Å—Ç—Ä–æ–∫

function string_split(string, delimiter) {
    var result = [];
    var current = "";
    
    for (var i = 1; i <= string_length(string); i++) {
        var char = string_char_at(string, i);
        if (char == delimiter) {
            if (current != "") {
                array_push(result, current);
                current = "";
            }
        } else {
            current += char;
        }
    }
    
    if (current != "") {
        array_push(result, current);
    }
    
    return result;
}
global.game_data = noone;




// scr_shop_enhancements.gml
// –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
function draw_elite_item_tooltip(x, y, width, item_data) {
    var tooltip_height = 200;
    var tooltip_y = y - tooltip_height - 10;
    
    // –§–æ–Ω —Ç—É–ª—Ç–∏–ø–∞
    draw_set_color(ui_bg_dark);
    draw_rectangle(x, tooltip_y, x + width, tooltip_y + tooltip_height, false);
    
    // –†–∞–º–∫–∞ —Ü–≤–µ—Ç–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
    var rarity_color = get_rarity_color(item_data[? "rarity"]);
    draw_set_color(rarity_color);
    draw_rectangle(x, tooltip_y, x + width, tooltip_y + 4, false);
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ
    draw_set_color(ui_text);
    draw_set_halign(fa_center);
    draw_text(x + width/2, tooltip_y + 15, item_data[? "name"]);
    draw_set_halign(fa_left);
    
    // –†–µ–¥–∫–æ—Å—Ç—å
    var rarity_name = get_rarity_name(item_data[? "rarity"]);
    draw_set_color(rarity_color);
    draw_set_halign(fa_center);
    draw_text(x + width/2, tooltip_y + 35, rarity_name);
    draw_set_halign(fa_left);
    
    // –û–ø–∏—Å–∞–Ω–∏–µ
    draw_set_color(ui_text_secondary);
    draw_set_font(fnt_small);
    draw_text_ext(x + 10, tooltip_y + 55, item_data[? "description"], width - 20, 80);
    draw_set_font(fnt_main);
    
    // –ë–æ–Ω—É—Å—ã
    var bonus_y = tooltip_y + 120;
    draw_set_color(ui_text);
    
    if (item_data[? "strength_bonus"] > 0) {
        draw_text(x + 10, bonus_y, "üí™ –°–∏–ª–∞: +" + string(item_data[? "strength_bonus"]));
        bonus_y += 20;
    }
    if (item_data[? "intelligence_bonus"] > 0) {
        draw_text(x + 10, bonus_y, "üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: +" + string(item_data[? "intelligence_bonus"]));
        bonus_y += 20;
    }
    if (item_data[? "defense_bonus"] > 0) {
        draw_text(x + 10, bonus_y, "üõ°Ô∏è –ó–∞—â–∏—Ç–∞: +" + string(item_data[? "defense_bonus"]));
        bonus_y += 20;
    }
    if (item_data[? "health_bonus"] > 0) {
        draw_text(x + 10, bonus_y, "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: +" + string(item_data[? "health_bonus"]));
        bonus_y += 20;
    }
    if (item_data[? "gold_bonus"] > 0) {
        draw_text(x + 10, bonus_y, "üí∞ –ó–æ–ª–æ—Ç–æ: +" + string(item_data[? "gold_bonus"]) + "%");
        bonus_y += 20;
    }
    
    // –†–∞–º–∫–∞
    draw_set_color(ui_border_color);
    draw_rectangle(x, tooltip_y, x + width, tooltip_y + tooltip_height, true);
}

function update_shop_system_for_elite_items() {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–∫–∏–¥–æ–∫
    global.shop_max_reputation_level = 20;
    global.shop_reputation_discount_per_level = 2; // 2% –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏
    var reputation_discount = min(global.shop_reputation_level * global.shop_reputation_discount_per_level, 40); // –ú–∞–∫—Å 40% —Å–∫–∏–¥–∫–∞
    return reputation_discount;
}

function calculate_elite_discount(item_id) {
    var base_price = ds_map_find_value(global.ItemDB, item_id)[? "price"];
    var reputation_discount = min(global.shop_reputation_level * 2, 40);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–ª—è –æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    var elite_discount = 0;
    if (base_price >= 100000000) { // 100M+
        elite_discount = 10;
    }
    if (base_price >= 500000000) { // 500M+
        elite_discount = 15;
    }
    if (base_price >= 1000000000) { // 1B+
        elite_discount = 20;
    }
    
    var total_discount = reputation_discount + elite_discount;
    return max(1, floor(base_price * (100 - total_discount) / 100));
}
// –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
function safe_sell_item(item_index, quantity) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    if (!variable_global_exists("playerInventory") || !ds_exists(global.playerInventory, ds_type_list)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
    if (item_index < 0 || item_index >= ds_list_size(global.playerInventory)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞: " + string(item_index));
        return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    var item_data = ds_list_find_value(global.playerInventory, item_index);
    if (is_undefined(item_data)) {
        show_debug_message("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
    if (!variable_struct_exists(item_data, "id") || !variable_struct_exists(item_data, "quantity")) {
        show_debug_message("–û—à–∏–±–∫–∞: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!");
        return false;
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏
    return sell_item(item_index, quantity);
}
// scr_inventory_system.gml - –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é

function use_item_from_inventory(cell_index) {
    show_debug_message("=== –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–†–ï–î–ú–ï–¢–ê –ò–ó –ò–ù–í–ï–ù–¢–ê–†–Ø ===");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    if (!variable_global_exists("playerInventory") || !ds_exists(global.playerInventory, ds_type_list)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
    if (cell_index < 0 || cell_index >= ds_list_size(global.playerInventory)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞: " + string(cell_index));
        return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    var item_data = ds_list_find_value(global.playerInventory, cell_index);
    if (is_undefined(item_data)) {
        show_debug_message("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
        return false;
    }
    
    var item_id = item_data[? "id"];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (!variable_global_exists("ItemDB") || !ds_exists(global.ItemDB, ds_type_map)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
        return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –±–∞–∑—ã
    var db_data = ds_map_find_value(global.ItemDB, item_id);
    if (db_data == -1) {
        show_debug_message("–û—à–∏–±–∫–∞: –ü—Ä–µ–¥–º–µ—Ç —Å ID " + string(item_id) + " –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!");
        return false;
    }
    
    var item_type = db_data[? "type"];
    var item_name = db_data[? "name"];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç
    if (item_type != global.ITEM_TYPE.POTION && item_type != global.ITEM_TYPE.SCROLL) {
        add_notification("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!");
        return false;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–º–µ—Ç
    var success = use_potion(item_id);
    
    if (success) {
        add_notification("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: " + item_name);
    } else {
        add_notification("–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: " + item_name);
    }
    
    return success;
}
// scr_inventory_system.gml - –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é

function unequip_item_from_slot(hero_index, slot_type) {
    show_debug_message("=== –°–ù–Ø–¢–ò–ï –ü–†–ï–î–ú–ï–¢–ê –° –≠–ö–ò–ü–ò–†–û–í–ö–ò ===");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    if (!variable_global_exists("equipment_slots")) {
        show_debug_message("–û—à–∏–±–∫–∞: equipment_slots –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞ –≥–µ—Ä–æ—è
    if (hero_index < 0 || hero_index >= array_length(global.equipment_slots)) {
        show_debug_message("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≥–µ—Ä–æ—è: " + string(hero_index));
        return false;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–ª–æ—Ç–∞
    var item_id = variable_struct_get(global.equipment_slots[hero_index], slot_type);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Å–ª–æ—Ç
    if (item_id == -1) {
        add_notification("–°–ª–æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—É—Å—Ç!");
        return false;
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    var success = UnequipItem(hero_index, slot_type);
    
    if (success) {
        add_notification("–ü—Ä–µ–¥–º–µ—Ç —Å–Ω—è—Ç —Å " + get_hero_name(hero_index));
    } else {
        add_notification("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç!");
    }
    
    return success;
}