// scr_draw_functions.gml
function draw_interface() {
    // –†–∏—Å—É–µ–º —Ñ–æ–Ω–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
    draw_background_gradient();
    
    // 1. –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å (25%) - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–º–Ω–∞—Ç—ã
    if (room == room_hepo_arena) {
        draw_hepo_arena_room();
    } else {
        draw_arenas_section();
    }
    
    // 2. –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å (35%) - –ò–≥—Ä–æ–≤–∞—è –∑–æ–Ω–∞  
    draw_game_zone();
    
    // 3. –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å (–æ—Å—Ç–∞–≤—à–µ–µ—Å—è) - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    draw_control_panel();
    
    // 4. –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    draw_expedition_confirmation();
}

function draw_background_gradient() {
    // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    for (var i = 0; i < global.screen_height; i++) {
        var ratio = i / global.screen_height;
        var r = lerp(15, 25, ratio);
        var g = lerp(20, 35, ratio);
        var b = lerp(30, 45, ratio);
        draw_set_color(make_color_rgb(r, g, b));
       // draw_rectangle(0, i, global.screen_width, i + 1, false);
    }
}

function draw_modern_panel(x, y, width, height, with_shadow = true) {
    if (with_shadow) {
        // –¢–µ–Ω—å –ø–∞–Ω–µ–ª–∏
        draw_set_color(c_yellow);
        draw_set_alpha(0.3);
        //draw_rectangle(x + 3, y + 3, x + width + 3, y + height + 3, false);
        draw_set_alpha(1);
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    draw_set_color(c_yellow);
    //draw_rectangle(x, y, x + width, y + height, false);
    
    // –í–µ—Ä—Ö–Ω–∏–π –∞–∫—Ü–µ–Ω—Ç
    draw_set_color(c_yellow);
    draw_set_alpha(0.1);
    //draw_rectangle(x, y, x + width, y + 2, false);
    draw_set_alpha(1);
    
    // –†–∞–º–∫–∞
    draw_set_color(c_yellow);
    //draw_rectangle(x, y, x + width, y + height, true);
}

function draw_modern_button(x, y, width, height, text, is_active = false, is_hovered = false) {
    var btn_color = ui_bg_light;
    var text_color = c_yellow;
    
    if (is_active) {
        btn_color = ui_highlight;
        text_color = c_white;
    } else if (is_hovered) {
        btn_color = ui_bg_accent;
    }
    
    // –¢–µ–Ω—å –∫–Ω–æ–ø–∫–∏
    draw_set_color(ui_shadow_color);
    draw_set_alpha(0.4);
    draw_rectangle(x + 2, y + 2, x + width + 2, y + height + 2, false);
    draw_set_alpha(1);
    
    // –ì—Ä–∞–¥–∏–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏
    draw_set_color(btn_color);
    draw_rectangle(x, y, x + width, y + height, false);
    
    // –°–≤–µ—Ç–æ–≤–∞—è –ø–æ–ª–æ—Å–∞ —Å–≤–µ—Ä—Ö—É –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ–±—ä–µ–º–∞
    draw_set_color(c_white);
    draw_set_alpha(0.1);
    draw_rectangle(x, y, x + width, y + 1, false);
    draw_set_alpha(1);
    
    // –†–∞–º–∫–∞
    draw_set_color(is_active ? ui_highlight : ui_border_color);
    draw_rectangle(x, y, x + width, y + height, true);
    
    // –¢–µ–∫—Å—Ç
    draw_set_color(text_color);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(x + width/2, y + height/2, text);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}

function draw_arenas_section() {
    var section_height = global.top_height;
    draw_set_color(ui_bg_medium);
   // draw_rectangle(0, 0, global.screen_width, section_height, false);
    
    draw_set_color(ui_text);
    draw_set_halign(fa_center);
    //draw_text(global.screen_width / 2, 10, "–¢–†–ï–ù–ò–†–û–í–û–ß–ù–´–ï –ê–†–ï–ù–´");
    draw_set_halign(fa_left);
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞—Ä–µ–Ω –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ä–µ–Ω
    var arena_count = array_length(global.arenas);
    var arena_width = floor((global.screen_width - 50) / arena_count);
    var arena_height = section_height - 40;
    var arena_start_y = 30;
    
    global.arena_buttons = [];
    
    for (var i = 0; i < arena_count; i++) {
        var arena_x = 10 + i * (arena_width + 10);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        if (arena_x + arena_width > global.screen_width) {
            arena_width = global.screen_width - arena_x - 10;
        }
        
        draw_arena(arena_x, arena_start_y, arena_width, arena_height, i);
    }
}
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ draw_expeditions_tab().  –û–Ω–∞
// –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ ‚â§ global.max_available_difficulty.
function draw_expeditions_tab(x, y, width, height) {
    // –§–æ–Ω –ø–∞–Ω–µ–ª–∏
    draw_set_color(ui_bg_dark);
    draw_rectangle(x, y, x + width, y + height, false);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw_set_color(ui_text);
    draw_set_halign(fa_center);
    draw_text(x + width/2, y + 20, "üó∫Ô∏è –≠–ö–°–ü–ï–î–ò–¶–ò–ò");
    draw_set_halign(fa_left);
    
    // –°–±—Ä–æ—Å –º–∞—Å—Å–∏–≤–∞ –∫–Ω–æ–ø–æ–∫
    global.expedition_buttons = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (!variable_global_exists("expedition") || !variable_global_exists("max_available_difficulty") || !variable_global_exists("expedition_difficulties")) {
        draw_set_color(ui_text_secondary);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text(x + width/2, y + height/2, "–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        return;
    }
    
    // –ï—Å–ª–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ ‚Äì –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–æ—Å—Ç–∞–≤—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    if (global.expedition.active) {
        /*
         * –ó–¥–µ—Å—å –æ—Å—Ç–∞—ë—Ç—Å—è –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é,
         * –ø—Ä–æ–≥—Ä–µ—Å—Å‚Äë–±–∞—Ä, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∏ —Ç.–ø.
         */
        return;
    }
    
    // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π ---
    draw_set_color(ui_text);
    draw_text(x + 20, y + 60, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏:");
    
    var expedition_width  = width - 300;
    var displayed_count = 0;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    var max_difficulty = min(global.max_available_difficulty, array_length(global.expedition_difficulties) - 1);
     // –ß—Ç–æ–±—ã –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –ø–æ–º–µ—â–∞–ª–∏—Å—å –≤ –±–ª–æ–∫, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö –ø–æ –≤—ã—Å–æ—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏.
    var total_entries = max(1, max_difficulty + 1);
    var list_top = y + 70;
    var list_bottom = y + height - 20;
    var available_height = max(1, list_bottom - list_top);
    var expedition_step = available_height / total_entries;
    var expedition_height = floor(clamp(expedition_step - 8, 36, expedition_step));
    var expedition_offset = max(0, (expedition_step - expedition_height) * 0.5);
    
    for (var i = 0; i <= max_difficulty; i++) {
        var diff = global.expedition_difficulties[i];
       var expedition_y = floor(list_top + displayed_count * expedition_step + expedition_offset);
        displayed_count++;
        
       
        // –ù–∞ —Å–ª—É—á–∞–π –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –≤—ã–π–¥–µ—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        if (expedition_y + expedition_height > list_bottom) {
            expedition_y = max(list_top, list_bottom - expedition_height);
        }
        var success_chance = calculate_success_chance(i);
        var is_hovered = point_in_rectangle(mouse_x, mouse_y, x + 20, expedition_y, x + 20 + expedition_width, expedition_y + expedition_height);
        
        // –§–æ–Ω
        var bg_color = is_hovered ? merge_color(ui_bg_light, c_white, 0.1) : ui_bg_light;
        draw_set_color(bg_color);
        draw_rectangle(x + 20, expedition_y, x + 20 + expedition_width, expedition_y + expedition_height, false);
        
        // –¶–≤–µ—Ç –ø–æ–ª–æ—Å—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        var difficulty_color = ui_highlight;
        if (i >= 3) difficulty_color = ui_danger;
        else if (i >= 1) difficulty_color = ui_warning_color;
        draw_set_color(difficulty_color);
        draw_rectangle(x + 20, expedition_y, x + 25, expedition_y + expedition_height, false);
        
        // –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å
        draw_set_color(ui_text);
        draw_text(x + 35, expedition_y, diff.name);
        draw_set_color(ui_text_secondary);
        draw_text(x + 35, expedition_y + 10, "–£—Ä–æ–≤–µ–Ω—å " + string(diff.level));
        
        // –û–ø–∏—Å–∞–Ω–∏–µ (—Å–æ–∫—Ä–∞—â–∞–µ–º –¥–æ 35 —Å–∏–º–≤–æ–ª–æ–≤)
        draw_set_color(ui_text_secondary);
        draw_set_font(fnt_small);
        var short_desc = string_copy(diff.description, 1, 35);
        if (string_length(diff.description) > 35) short_desc += "...";
        draw_text(x + 35, expedition_y + 20, short_desc);
        draw_set_font(fnt_main);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        var stats_y = expedition_y + 30;
        draw_set_color(ui_text);
        draw_text(x + 35, stats_y, "üí∞ " + string(diff.reward_min) + "-" + string(diff.reward_max));
        draw_text(x + 150, stats_y, "‚è±Ô∏è " + string(floor(diff.duration / 60)) + "—Å");
        draw_text(x + 220, stats_y, "üéØ " + string(round(success_chance)) + "%");
        
        // –ë–æ—Å—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (diff.boss != -1 && variable_global_exists("companions") && diff.boss < array_length(global.companions)) {
            var boss_name = global.companions[diff.boss].name;
            draw_set_color(ui_danger);
            draw_text(x + expedition_width - 120, expedition_y + 10, "‚öîÔ∏è " + boss_name);
        }
        
        // –†–∞–º–∫–∞
        draw_set_color(is_hovered ? merge_color(ui_border_color, c_white, 0.2) : ui_border_color);
        draw_rectangle(x + 20, expedition_y, x + 20 + expedition_width, expedition_y + expedition_height, true);
        
        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
        array_push(global.expedition_buttons, {
            difficulty: i,
            x1: x + 20,
            y1: expedition_y,
            x2: x + 20 + expedition_width,
            y2: expedition_y + expedition_height
        });
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å
    if (displayed_count == 0) {
        draw_set_color(ui_text_secondary);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text(x + width/2, y + height/2, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π");
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä–∞
        if (global.expedition_auto_repeat.enabled) {
            var auto_y = y + height - 40;
            draw_set_color(ui_success_color);
            draw_set_halign(fa_center);
            draw_text(x + width/2, auto_y, "üîÅ –ê–í–¢–û-–ü–û–í–¢–û–† –ê–ö–¢–ò–í–ï–ù");
            draw_set_halign(fa_left);
        }
    }

function draw_arena(x, y, width, height, index) {
    var arena = global.arenas[index];
    var companion = global.companions[index];
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
    draw_modern_panel(x, y, width, height);
    
    // –¶–≤–µ—Ç –∞—Ä–µ–Ω—ã –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ
    var arena_color = companion_colors[index];
    
    draw_set_color(ui_text);
    draw_set_halign(fa_center);
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ —Å –∏–∫–æ–Ω–∫–æ–π (—Ç–µ–∫—Å—Ç–æ–≤–æ–π)
    var name = "‚öîÔ∏è " + string_copy(arena.name, 1, min(string_length(arena.name), 12));
    draw_text(x + width/2, y - 20, name);
    
    if (arena.unlocked) {
        if (arena.active) {
            // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ª–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            var progress_width = width - 20;
            var progress_x = x + 10;
            var progress_y = y + 60;
            
            // –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            draw_set_color(ui_bg_dark);
            draw_rectangle(progress_x, progress_y, progress_x + progress_width, progress_y + 8, false);
            
            // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            var pulse = 0.7 + sin(global.frame_count * 0.1) * 0.3;
            draw_set_color(merge_color(ui_success_color, c_yellow, pulse * 0.2));
            var progress = companion.training_progress / 100;
            draw_rectangle(progress_x, progress_y, progress_x + progress_width * progress, progress_y + 8, false);
            
            draw_set_color(ui_success_color);
            draw_text(x + width/2, y + 30, "üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞...");
            draw_text(x + width/2, y + 45, "–ù–∞–∫–æ–ø–ª–µ–Ω–æ: " + string(floor(companion.training_progress)) + " –æ–ø—ã—Ç–∞");
            
            // –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            var btn_y = y + height - 35;
            var is_hovered = point_in_rectangle(mouse_x, mouse_y, x + 10, btn_y, x + width - 10, btn_y + 25);
            draw_modern_button(x + 60, btn_y, width - 100, 25, "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å", false, is_hovered);
            
            array_push(global.arena_buttons, {
                type: "complete_training",
                index: index,
                x1: x + 10, y1: btn_y,
                x2: x + width - 10, y2: btn_y + 25
            });
            
        } else {
            draw_set_color(ui_text_secondary);
            draw_text(x + width/2, y + 30, "üí§ –°–≤–æ–±–æ–¥–Ω–∞");
            draw_text(x + width/2, y + 45, "‚ö° " + string(companion.training_rate) + "/—Å–µ–∫");
            
            // –î–õ–Ø AREN–´ HEPO (index == 0) –î–û–ë–ê–í–õ–Ø–ï–ú –î–í–ï –ö–ù–û–ü–ö–ò
            if (index == 0) { // Hepo –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å 0
                // –ö–Ω–æ–ø–∫–∞ "–ù–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" - –≤–µ—Ä—Ö–Ω—è—è
                var training_btn_y = y + height - 70;
                var training_btn_hovered = point_in_rectangle(mouse_x, mouse_y, x + 10, training_btn_y, x + width - 10, training_btn_y + 25);
                draw_modern_button(x + 10, training_btn_y, width - 20, 25, "‚ö° –ù–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", false, training_btn_hovered);
                
                // –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏ –Ω–∞ –∞—Ä–µ–Ω—É" - –Ω–∏–∂–Ω—è—è
                var arena_btn_y = y + height - 35;
                var arena_btn_hovered = point_in_rectangle(mouse_x, mouse_y, x + 10, arena_btn_y, x + width - 10, arena_btn_y + 25);
                draw_modern_button(x + 10, arena_btn_y, width - 20, 25, "üö™ –í–æ–π—Ç–∏ –Ω–∞ –∞—Ä–µ–Ω—É", false, arena_btn_hovered);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–∞—Å—Å–∏–≤
                array_push(global.arena_buttons, {
                    type: "start_training",
                    index: index,
                    x1: x + 10, y1: training_btn_y,
                    x2: x + width - 10, y2: training_btn_y + 25
                });
                
                array_push(global.arena_buttons, {
                    type: "enter_arena",
                    index: index,
                    x1: x + 10, y1: arena_btn_y,
                    x2: x + width - 10, y2: arena_btn_y + 25
                });
                
            } else {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö –∞—Ä–µ–Ω –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–Ω–æ–ø–∫—É
                array_push(global.arena_buttons, {
                    type: "start_training",
                    index: index,
                    x1: x, y1: y,
                    x2: x + width, y2: y + height
                });
            }
        }
    } else {
        draw_set_color(ui_text_secondary);
        draw_text(x + width/2, y + 200, "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
    }
    
    draw_set_halign(fa_left);
}

function draw_game_zone() {
    var section_y = global.top_height;
    var section_height = global.middle_height;
    
    draw_set_color(ui_bg_dark);
   // draw_rectangle(0, section_y, global.screen_width, section_y + section_height, false);
    
    draw_set_color(ui_text);
    draw_set_halign(fa_center);
    // draw_text(global.screen_width/2, section_y + 15, "–ò–ì–†–û–í–ê–Ø –ó–û–ù–ê");
    draw_set_halign(fa_left);
    
    var zone_x = global.screen_width * 0.1;
    var zone_y = section_y + 40;
    var zone_width = global.screen_width * 0.8;
    var zone_height = section_height - 60;
    
    draw_set_color(ui_bg_medium);
   // draw_rectangle(zone_x, zone_y, zone_x + zone_width, zone_y + zone_height, false);
    
    if (global.expedition.active) {
        draw_text(zone_x + zone_width/2, zone_y + zone_height/2 - 20, "–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ");
        var progress = global.expedition.progress / global.expedition.duration;
        draw_text(zone_x + zone_width/2, zone_y + zone_height/2, "–ü—Ä–æ–≥—Ä–µ—Å—Å: " + string(floor(progress * 100)) + "%");
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
        var bar_width = zone_width * 0.6;
        var bar_x = zone_x + (zone_width - bar_width) / 2;
        var bar_y = zone_y + zone_height/2 + 20;
        
        draw_set_color(ui_bg_dark);
        draw_rectangle(bar_x, bar_y, bar_x + bar_width, bar_y + 15, false);
        draw_set_color(ui_highlight);
        draw_rectangle(bar_x, bar_y, bar_x + bar_width * progress, bar_y + 15, false);
        draw_set_color(ui_border_color);
        draw_rectangle(bar_x, bar_y, bar_x + bar_width, bar_y + 15, true);
    } else if (global.buff_system.is_applying_buffs) {
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –±–∞—Ñ–æ–≤
        draw_buff_application(zone_x, zone_y, zone_width, zone_height);
    } else {
        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Å—Ç–µ—Ä –ø—Ä–∏ –æ—Ç–¥—ã—Ö–µ
        draw_campfire(zone_x, zone_y, zone_width, zone_height);
        
		draw_set_alpha(0.6);
        draw_set_color(ui_text);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text(zone_x + 180 + zone_width/2, zone_y + 90 + zone_height/2, "–û—Ç—Ä—è–¥ –æ—Ç–¥—ã—Ö–∞–µ—Ç");
        draw_set_color(ui_text_secondary);
        draw_text(zone_x + 200 + zone_width/2, zone_y + 110 + zone_height/2, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ—Å—å –≤ —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥");
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
		draw_set_alpha(1);
    }
}

function draw_control_panel() {
    var panel_y = global.top_height + global.middle_height;
    var panel_height = global.bottom_height;
    
    // 3.1 –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (25%) - –û—Ç—Ä—è–¥ –∏–ª–∏ –±–∞—Ñ—ã Hepo
    if (room == room_hepo_arena) {
        draw_hepo_buffs_section(panel_y, panel_height);
    } else {
        draw_squad_section(panel_y, panel_height);
    }
    
    // 3.2 –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (75%) - –í–∫–ª–∞–¥–∫–∏
    draw_tabs_section(panel_y, panel_height);
    
    // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫
    var content_x = global.squad_width;
    var content_y = panel_y + 40; // +40 —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–¥ –≤–∫–ª–∞–¥–∫–∞–º–∏
    var content_width = global.tabs_width;
    var content_height = panel_height - 40; // –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É –Ω–∞ –≤—ã—Å–æ—Ç—É –≤–∫–ª–∞–¥–æ–∫
    
    switch(active_tab) {
        case 0: draw_stats_tab(content_x, content_y, content_width, content_height); break;
        case 1: draw_inventory_tab(content_x, content_y, content_width, content_height); break;
        case 2: draw_expeditions_tab(content_x, content_y, content_width, content_height); break;
        case 3: draw_shop_tab(content_x, content_y, content_width, content_height); break;
        case 4: draw_companions_tab(content_x, content_y, content_width, content_height); break;
        case 5: draw_abilities_tab(content_x, content_y, content_width, content_height); break;
    }
}

function draw_squad_section(panel_y, panel_height) {
    var section_width = global.squad_width;
    
    draw_set_color(ui_bg_dark);
    //draw_rectangle(0, panel_y, section_width, panel_y + panel_height, false);
    
    draw_set_color(ui_text);
    draw_set_halign(fa_center);
    draw_text(section_width/2, panel_y + 15, "–û–¢–†–Ø–î");
    draw_set_halign(fa_left);
    
    // –û—Ç—Ä—è–¥: –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π + 4 –ø–æ–º–æ—â–Ω–∏—Ü—ã
    var member_height = 70;
    var start_y = panel_y + 40;
    var member_width = section_width - 20;
    
    // –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π (–≤—Å–µ–≥–¥–∞ –≤ –æ—Ç—Ä—è–¥–µ)
    draw_squad_member(10, start_y, member_width, member_height, global.hero, -1, true);
    
    // –ü–æ–º–æ—â–Ω–∏—Ü—ã
    global.squad_buttons = [];
    for (var i = 0; i < 3; i++) {
        var member_y = start_y + (i+1) * (member_height + 5);
        var companion = global.companions[i];
        
        if (companion.unlocked && !companion.training) {
            // –ü–æ–º–æ—â–Ω–∏—Ü–∞ –≤ –æ—Ç—Ä—è–¥–µ
            draw_squad_member(10, member_y, member_width, member_height, companion, i, false);
            
            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            array_push(global.squad_buttons, {
                type: "companion",
                index: i,
                x1: 10, y1: member_y,
                x2: 10 + member_width, y2: member_y + member_height
            });
        } else {
            // –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç –∏–ª–∏ –ø–æ–º–æ—â–Ω–∏—Ü–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            draw_set_color(make_color_rgb(40, 40, 55));
            draw_rectangle(10, member_y, 10 + member_width, member_y + member_height, false);
            draw_set_color(ui_text_secondary);
            if (companion.training) {
                draw_text(15, member_y + 25, companion.name + " (—Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç—Å—è)");
            } else {
                draw_text(15, member_y + 25, "–ü—É—Å—Ç–æ–π —Å–ª–æ—Ç");
            }
        }
    }
}

function draw_squad_member(x, y, width, height, character, companion_index, is_hero) {
    // –§–æ–Ω —á–ª–µ–Ω–∞ –æ—Ç—Ä—è–¥–∞
    draw_set_color(ui_bg_light);
    draw_rectangle(x, y, x + width, y + height, false);
    
    // –¶–≤–µ—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∞ —Å–ª–µ–≤–∞ (–¥–ª—è –≥–µ—Ä–æ—è - —Å–∏–Ω—è—è, –¥–ª—è –ø–æ–º–æ—â–Ω–∏—Ü - –∏—Ö —Ü–≤–µ—Ç)
    var color = is_hero ? ui_highlight : companion_colors[companion_index];
    draw_set_color(color);
    draw_rectangle(x, y, x + 5, y + height, false);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    draw_set_color(ui_text);
    var name = is_hero ? "–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π" : character.name;
    draw_text(x + 10, y + 5, name);
    draw_text(x + 10, y + 25, "–£—Ä. " + string(character.level));
    
    // –ó–¥–æ—Ä–æ–≤—å–µ
    var health_text = "–ó–¥: " + string(character.health) + "/" + string(character.max_health);
    draw_text(x + 10, y + 45, health_text);
    
    // –î–ª—è –ø–æ–º–æ—â–Ω–∏—Ü –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç
    if (!is_hero) {
        draw_set_color(ui_text_secondary);
        draw_text(x + 70, y + 25, character.effect);
    }
}

function draw_campfire(x, y, width, height) {
    if (!global.expedition.active && global.hero.health < global.hero.max_health) {
        var fire_center_x = x + 200 + width / 2;
        var fire_center_y = y + height - 80;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–ª–∞–º–µ–Ω–∏
        var time = global.frame_count * 0.1;
        var flame_wave = sin(time) * 2;
        var pulse = 0.8 + sin(time * 2) * 0.2;
        
        // –£–≥–ª–∏ –ø–æ–¥ –∫–æ—Å—Ç—Ä–æ–º
        draw_set_color(make_color_rgb(80, 40, 20));
        draw_circle(fire_center_x, fire_center_y + 20, 30, false);
        
        // –û—Å–Ω–æ–≤–Ω–æ–µ –ø–ª–∞–º—è (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–µ–≤ –¥–ª—è –æ–±—ä–µ–º–∞)
        for (var i = 0; i < 3; i++) {
            var size = 25 - i * 5;
            var offset = i * 2;
            var alpha = 0.8 - i * 0.2;
            
            draw_set_color(make_color_rgb(255, 100 + i * 20, 0));
            draw_set_alpha(alpha);
            
            // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã –ø–ª–∞–º–µ–Ω–∏
            var vertices = [];
            array_push(vertices, fire_center_x, fire_center_y - size - flame_wave);
            array_push(vertices, fire_center_x - size + offset, fire_center_y + 10);
            array_push(vertices, fire_center_x + size - offset, fire_center_y + 10);
            
            draw_primitive_begin(pr_trianglelist);
            for (var j = 0; j < array_length(vertices); j += 2) {
                draw_vertex(vertices[j], vertices[j + 1]);
            }
            draw_primitive_end();
        }
        draw_set_alpha(1);
        
        // –ò—Å–∫—Ä—ã
        if (global.frame_count mod 3 == 0) {
            for (var i = 0; i < 2; i++) {
                var spark_x = fire_center_x + random_range(-15, 15);
                var spark_y = fire_center_y - random_range(5, 25);
                var spark_size = random_range(1, 3);
                
                draw_set_color(make_color_rgb(255, 255, 150));
                draw_set_alpha(0.7);
                draw_rectangle(spark_x, spark_y, spark_x + spark_size, spark_y + spark_size, false);
            }
            draw_set_alpha(1);
        }
        
        // –î—ã–º
        var smoke_y = fire_center_y - 40 - (global.frame_count mod 60) * 0.5;
        draw_set_color(make_color_rgb(100, 100, 100));
        draw_set_alpha(0.3);
        draw_circle(fire_center_x + 10, smoke_y, 15, false);
        draw_set_alpha(1);
        
        // –¢–µ–∫—Å—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø—É–ª—å—Å–∞—Ü–∏–∏
        draw_set_color(c_aqua);
        draw_set_halign(fa_center);
        var text_alpha = 0.7 + sin(global.frame_count * 0.05) * 0.3;
        draw_set_alpha(text_alpha);
        draw_text(fire_center_x, fire_center_y - 55, "üî• –û—Ç—Ä—è–¥ –æ—Ç–¥—ã—Ö–∞–µ—Ç —É –∫–æ—Å—Ç—Ä–∞");
        draw_set_alpha(1);
        draw_set_halign(fa_left);
    }
}


// –í —Ñ—É–Ω–∫—Ü–∏–∏ draw_hepo_arena_room() —É–ª—É—á—à–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞:

function draw_hepo_arena_room() {
    // –§–æ–Ω –∞—Ä–µ–Ω—ã Hepo
    draw_set_color(make_color_rgb(20, 35, 60));
    draw_rectangle(0, 0, global.screen_width, global.middle_height, false);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw_set_color(ui_text);
    draw_set_halign(fa_center);
    draw_text(global.screen_width / 2, 30, "üèÜ –ê–†–ï–ù–ê HEPO");
    
    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞ —Å Hepo
    var center_x = global.screen_width / 2;
    var center_y = global.middle_height / 2;
    
    // –ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä—É–≥
    draw_set_color(make_color_rgb(97, 175, 239));
    draw_set_alpha(0.3);
    draw_circle(center_x, center_y, 80, false);
    draw_set_alpha(1);
    
    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Hepo
    var breath = sin(global.frame_count * 0.05) * 3;
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø—Ä–∞–π—Ç–∞ Hepo (–∫—Ä—É–≥–∏)
    draw_set_color(make_color_rgb(97, 175, 239));
    draw_circle(center_x, center_y - 20 + breath, 15, false); // –≥–æ–ª–æ–≤–∞
    
    draw_set_color(make_color_rgb(70, 130, 180));
    draw_rectangle(center_x - 12, center_y + breath, center_x + 12, center_y + 50 + breath, false); // —Ç–µ–ª–æ
    
    // –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (global.frame_count mod 10 == 0) {
        for (var i = 0; i < 3; i++) {
            var angle = random(360);
            var dist = random(30);
            var spark_x = center_x + lengthdir_x(dist, angle);
            var spark_y = center_y + lengthdir_y(dist, angle);
            
            draw_set_color(make_color_rgb(150, 200, 255));
            draw_set_alpha(0.7);
            draw_circle(spark_x, spark_y, 2, false);
            draw_set_alpha(1);
        }
    }
    
    // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
    var return_btn_x = global.screen_width - 120;
    var return_btn_y = 20;
    var return_btn_width = 100;
    var return_btn_height = 30;
    
    var is_hovered = point_in_rectangle(mouse_x, mouse_y, return_btn_x, return_btn_y, return_btn_x + return_btn_width, return_btn_y + return_btn_height);
    
    // –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫—É —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –Ω–∞–≤–µ–¥–µ–Ω–∏—è
    draw_modern_button(return_btn_x, return_btn_y, return_btn_width, return_btn_height, "‚Üê –ù–∞–∑–∞–¥", false, is_hovered);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–æ ESC
    draw_set_color(ui_text_secondary);
    draw_set_font(fnt_small);
    draw_set_halign(fa_center);
    draw_text(return_btn_x + return_btn_width/2, return_btn_y + return_btn_height + 15, "[ESC]");
    draw_set_halign(fa_left);
    draw_set_font(fnt_main);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ë–û–õ–ï–ï –Ø–í–ù–´–ú–ò –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò
    global.return_button = {
        x1: return_btn_x, 
        y1: return_btn_y,
        x2: return_btn_x + return_btn_width, 
        y2: return_btn_y + return_btn_height
    };
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–µ–Ω–µ
    draw_set_color(ui_text);
    draw_set_halign(fa_center);
    draw_text(center_x, center_y + 80, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –∞—Ä–µ–Ω–∞ Hepo");
    draw_set_color(ui_text_secondary);
    draw_text(center_x, center_y + 105, "–ú–µ—Å—Ç–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫");
    
    draw_set_halign(fa_left);
}

//-235 250
function draw_notifications() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Å—Å–∏–≤, –ø—Ä–µ–∂–¥–µ —á–µ–º –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if (!variable_global_exists("notifications")) {
        return; // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    }
    
    var notification_x = 100;
    var notification_y = global.screen_height - 235;
    var notification_width = 250;
    var notification_height = 30;
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–∂–∏
    if (variable_global_exists("purchase_effects")) {
        var i = 0;
        while (i < ds_list_size(global.purchase_effects)) {
            var effect = ds_list_find_value(global.purchase_effects, i);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—è
            if (variable_struct_exists(effect, "purchase_frame")) {
                var age = global.frame_count - effect.purchase_frame;
                
                if (age < 90) { // 1.5 —Å–µ–∫—É–Ω–¥—ã
                    var alpha = 1 - (age / 90);
                    var effect_y = notification_y - (i * 25);
                    
                    if (effect.type == "sell") {
                        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–¥–∞–∂–∏ - –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
                        draw_set_color(merge_color(ui_success_color, c_white, alpha));
                        draw_set_alpha(alpha);
                        draw_set_halign(fa_center);
                        draw_text(notification_x + notification_width/2, effect_y, "üí∞ +" + string(effect.amount) + " –∑–æ–ª–æ—Ç–∞");
                        draw_set_halign(fa_left);
                        draw_set_alpha(1);
                    }
                    i++;
                } else {
                    ds_list_delete(global.purchase_effects, i);
                    // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º i, —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–º–µ—Å—Ç–∏–ª–∏—Å—å
                }
            } else {
                // –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                ds_list_delete(global.purchase_effects, i);
            }
        }
    }
    
    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±—ã—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    for (var i = 0; i < array_length(global.notifications); i++) {
        var notification = global.notifications[i];
        var alpha = notification.timer / 180;
        
        if (alpha > 0) {
            // –§–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            draw_set_color(ui_bg_dark);
            draw_set_alpha(alpha * 0.8);
            draw_rectangle(notification_x, notification_y - notification_height, 
                          notification_x + notification_width, notification_y, false);
            draw_set_alpha(1);
            
            // –†–∞–º–∫–∞
            draw_set_color(ui_highlight);
            draw_set_alpha(alpha);
            draw_rectangle(notification_x, notification_y - notification_height, 
                          notification_x + notification_width, notification_y, true);
            draw_set_alpha(1);
            
            // –¢–µ–∫—Å—Ç
            draw_set_color(ui_text);
            draw_set_alpha(alpha);
            draw_text(notification_x + 10, notification_y - notification_height + 5, notification.message);
            draw_set_alpha(1);
            
            notification.timer--;
            notification_y -= notification_height + 5;
        } else {
            array_delete(global.notifications, i, 1);
            i--;
        }
    }
}
function lerp(a, b, t) {
    return a + (b - a) * t;
}

function draw_debug_bounds(x, y, width, height, color) {
    // –†–∏—Å—É–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    draw_set_color(color);
    draw_rectangle(x, y, x + width, y + height, false);
    draw_set_color(c_white);
    draw_text(x + 5, y + 5, "x:" + string(x) + " y:" + string(y) + " w:" + string(width) + " h:" + string(height));
}


// –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–†–ò–°–û–í–ö–ò –ò–ö–û–ù–û–ö –¢–ò–ü–û–í –ü–†–ï–î–ú–ï–¢–û–í
function draw_item_type_icon_improved(x, y, size, item_type, is_hovered) {
    var icon_color = is_hovered ? merge_color(ui_highlight, c_white, 0.3) : ui_highlight;
    
    draw_set_color(icon_color);
    
    switch(item_type) {
        case global.ITEM_TYPE.WEAPON:
            // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ—á
            draw_rectangle(x + size/2 - 2, y + 5, x + size/2 + 2, y + size - 5, false);
            draw_rectangle(x + 8, y + size - 8, x + size - 8, y + size - 5, false);
            break;
            
        case global.ITEM_TYPE.ARMOR:
            // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —â–∏—Ç
            draw_rectangle(x + 6, y + 8, x + size - 6, y + size - 6, false);
            draw_rectangle(x + size/2 - 1, y + 6, x + size/2 + 1, y + size - 8, false);
            break;
            
        case global.ITEM_TYPE.POTION:
            // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–µ–ª—å–µ
            draw_rectangle(x + 8, y + 12, x + size - 8, y + size - 4, false);
            draw_rectangle(x + 10, y + 6, x + size - 10, y + 12, false);
            // –ü—É–∑—ã—Ä—å–∫–∏
            draw_set_color(c_white);
            draw_circle(x + 12, y + 10, 1, true);
            draw_circle(x + size - 12, y + 15, 1, true);
            break;
            
        case global.ITEM_TYPE.ACCESSORY:
            // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª—å—Ü–æ
            draw_rectangle(x + 8, y + 8, x + size - 8, y + size - 8, false);
            draw_rectangle(x + 6, y + size/2 - 1, x + size - 6, y + size/2 + 1, false);
            break;
            
        case global.ITEM_TYPE.SCROLL:
            // –°–≤–∏—Ç–æ–∫
            draw_rectangle(x + 6, y + 8, x + size - 6, y + size - 8, false);
            // –õ–∏–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–≤–∏—Ç–∫–µ
            draw_set_color(c_white);
            for (var i = 0; i < 3; i++) {
                draw_rectangle(x + 8, y + 12 + i * 5, x + size - 8, y + 13 + i * 5, false);
            }
            break;
            
        default:
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞
            draw_rectangle(x + 4, y + 4, x + size - 4, y + size - 4, false);
            break;
    }
}
function draw_item_bonuses_compact(x, y, width, item_data, is_hovered) {
    var bonuses = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –±–æ–Ω—É—Å—ã
    if (item_data[? "strength_bonus"] > 0) {
        array_push(bonuses, "üí™ +" + string(item_data[? "strength_bonus"]));
    }
    if (item_data[? "defense_bonus"] > 0) {
        array_push(bonuses, "üõ°Ô∏è +" + string(item_data[? "defense_bonus"]));
    }
    if (item_data[? "intelligence_bonus"] > 0) {
        array_push(bonuses, "üß† +" + string(item_data[? "intelligence_bonus"]));
    }
    if (item_data[? "agility_bonus"] > 0) {
        array_push(bonuses, "‚ö° +" + string(item_data[? "agility_bonus"]));
    }
    
    // –ë–æ–Ω—É—Å—ã –¥–ª—è –∑–µ–ª–∏–π
    if (item_data[? "type"] == global.ITEM_TYPE.POTION) {
        if (item_data[? "health"] > 0) {
            array_push(bonuses, "‚ù§Ô∏è +" + string(item_data[? "health"]));
        }
        if (item_data[? "temp_strength"] > 0) {
            array_push(bonuses, "üí™ +" + string(item_data[? "temp_strength"]));
        }
    }
    
    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    var current_x = x;
    var current_y = y;
    var max_bonuses_per_row = 2;
    
    for (var i = 0; i < array_length(bonuses); i++) {
        if (i > 0 && i mod max_bonuses_per_row == 0) {
            current_x = x;
            current_y += 20;
        }
        
        draw_set_color(ui_text);
        draw_set_font(fnt_small);
        draw_text(current_x, current_y, bonuses[i]);
        
        current_x += string_width(bonuses[i]) + 10;
    }
}

function draw_shop_item_button_improved(x, y, width, height, item_data, index, is_hovered, custom_btn_y = -1) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–æ–∑–∏—Ü–∏—é Y –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞, –∏–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
    var btn_y = (custom_btn_y == -1) ? y + height - 35 : custom_btn_y;
    var btn_x = x + 10;
    var btn_width = width - 20;
    var btn_height = 35; // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É –∫–Ω–æ–ø–∫–∏
    
    var can_afford = global.gold >= item_data[? "price"];
    var is_mouse_over_button = point_in_rectangle(mouse_x, mouse_y, btn_x, btn_y, btn_x + btn_width, btn_y + btn_height);
    
    // –¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    var btn_color = can_afford ? ui_success_color : ui_danger;
    var text_color = ui_text;
    
    // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    if (is_mouse_over_button) {
        if (can_afford) {
            btn_color = merge_color(ui_success_color, c_white, 0.3);
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            var pulse = sin(global.frame_count * 0.3) * 0.1 + 0.9;
            btn_color = merge_color(btn_color, c_white, pulse * 0.1);
        } else {
            btn_color = merge_color(ui_danger, c_black, 0.2);
        }
    }
    
    // –¢–µ–Ω—å –∫–Ω–æ–ø–∫–∏
    draw_set_color(ui_shadow_color);
    draw_set_alpha(0.3);
    draw_rectangle(btn_x + 2, btn_y + 2, btn_x + btn_width + 2, btn_y + btn_height + 2, false);
    draw_set_alpha(1);
    
    // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –∫–Ω–æ–ø–∫–∏
    for (var i = 0; i < btn_height; i++) {
        var ratio = i / btn_height;
        var gradient_color = merge_color(btn_color, ui_bg_dark, ratio * 0.3);
        draw_set_color(gradient_color);
        draw_rectangle(btn_x, btn_y + i, btn_x + btn_width, btn_y + i + 1, false);
    }
    
    // –í–µ—Ä—Ö–Ω—è—è —Å–≤–µ—Ç–æ–≤–∞—è –ø–æ–ª–æ—Å–∞ –¥–ª—è –æ–±—ä–µ–º–∞
    draw_set_color(c_white);
    draw_set_alpha(0.2);
    draw_rectangle(btn_x, btn_y, btn_x + btn_width, btn_y + 2, false);
    draw_set_alpha(1);
    
    // –†–∞–º–∫–∞ –∫–Ω–æ–ø–∫–∏
    draw_set_color(merge_color(btn_color, c_white, 0.2));
    draw_rectangle(btn_x, btn_y, btn_x + btn_width, btn_y + btn_height, true);
    
    // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    draw_set_color(text_color);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    var btn_text = can_afford ? "üõí –ö–£–ü–ò–¢–¨" : "üîí –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û";
    if (can_afford && is_mouse_over_button) {
        btn_text = "üëá " + btn_text + " üëá";
    }
    
    // –õ–µ–≥–∫–∞—è —Ç–µ–Ω—å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    draw_set_color(ui_shadow_color);
    draw_set_alpha(0.5);
    draw_text(btn_x + btn_width/2 + 1, btn_y + btn_height/2 + 1, btn_text);
    draw_set_alpha(1);
    
    draw_set_color(text_color);
    draw_text(btn_x + btn_width/2, btn_y + btn_height/2, btn_text);
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    
}

function draw_abilities_tab(x, y, width, height) {
    draw_set_color(ui_bg_dark);
    draw_rectangle(x, y, x + width, y + height, false);
    
    draw_set_color(ui_text);
    draw_set_halign(fa_center);
    draw_text(x + width/2, y + 20, "–°–ü–û–°–û–ë–ù–û–°–¢–ò –ì–ï–†–û–Ø");
    draw_set_halign(fa_left);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–Ω–µ –∏ –æ—á–∫–∞—Ö –Ω–∞–≤—ã–∫–æ–≤
    draw_set_color(ui_highlight);
    draw_text(x + 20, y + 50, "–ú–∞–Ω–∞: " + string(floor(global.hero.mana)) + "/" + string(global.hero.max_mana));
    draw_set_color(ui_text);
    draw_text(x + 200, y + 50, "–û—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤: " + string(global.hero.skill_points));
    
    // –°–±—Ä–æ—Å –º–∞—Å—Å–∏–≤–∞ –∫–Ω–æ–ø–æ–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
    global.ability_buttons = [];
    
    var ability_width = 350;
    var ability_height = 120;
    var start_x = x + 20;
    var start_y = y + 80;
    var spacing = 20;
    
    for (var i = 0; i < array_length(global.abilities_database); i++) {
        var ability = global.abilities_database[i];
        var column = i mod 2;
        var row = i div 2;
        
        var ability_x = start_x + column * (ability_width + spacing);
        var ability_y = start_y + row * (ability_height + spacing);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if (ability_y + ability_height > y + height - 50) continue;
        
        var is_learned = ability_is_learned(ability.id);
        var can_learn = !is_learned && global.hero.level >= ability.level_required;
        var can_use = is_learned && (ability.type == global.ABILITY_TYPE.ACTIVE || ability.type == global.ABILITY_TYPE.ULTIMATE);
        var is_hovered = point_in_rectangle(mouse_x, mouse_y, ability_x, ability_y, ability_x + ability_width, ability_y + ability_height);
        
        // –§–æ–Ω —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        var bg_color = ability.color;
        if (!is_learned) {
            bg_color = merge_color(ui_bg_medium, ui_bg_dark, 0.5);
        }
        
        draw_set_color(bg_color);
        draw_rectangle(ability_x, ability_y, ability_x + ability_width, ability_y + ability_height, false);
        
        // –†–∞–º–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        var border_color = ui_border_color;
        if (ability.type == global.ABILITY_TYPE.ULTIMATE) {
            border_color = merge_color(ui_danger, c_yellow, 0.5);
        } else if (ability.type == global.ABILITY_TYPE.ACTIVE) {
            border_color = ui_highlight;
        }
        
        draw_set_color(is_hovered ? merge_color(border_color, c_white, 0.2) : border_color);
        draw_rectangle(ability_x, ability_y, ability_x + ability_width, ability_y + ability_height, true);
        
        // –ò–∫–æ–Ω–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        draw_set_color(ui_text);
        draw_text(ability_x + 10, ability_y + 10, ability.icon + " " + ability.name);
        
        // –¢–∏–ø —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        var type_text = "";
        switch(ability.type) {
            case global.ABILITY_TYPE.PASSIVE: type_text = "–ü–∞—Å—Å–∏–≤–Ω–∞—è"; break;
            case global.ABILITY_TYPE.ACTIVE: type_text = "–ê–∫—Ç–∏–≤–Ω–∞—è"; break;
            case global.ABILITY_TYPE.ULTIMATE: type_text = "–£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø"; break;
        }
        draw_set_color(ui_text_secondary);
        draw_text(ability_x + ability_width - 100, ability_y + 10, type_text);
        
        // –û–ø–∏—Å–∞–Ω–∏–µ
        draw_set_color(ui_text_secondary);
        draw_set_font(fnt_small);
        draw_text_ext(ability_x + 10, ability_y + 35, ability.description, ability_width - 20, 40);
        draw_set_font(fnt_main);
        
        // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        var info_y = ability_y + 80;
        draw_set_color(ui_text);
        draw_text(ability_x + 10, info_y, "–£—Ä. " + string(ability.level_required));
        
        if (ability.mana_cost > 0) {
            draw_text(ability_x + 80, info_y, "–ú–∞–Ω–∞: " + string(ability.mana_cost));
        }
        
        if (ability.cooldown > 0) {
            var cooldown_sec = ability.cooldown / 60;
            draw_text(ability_x + 180, info_y, "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: " + string(cooldown_sec) + "—Å");
        }
        
        // –°—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫–∏
        var status_x = ability_x + ability_width - 120;
        if (is_learned) {
            if (can_use) {
                var cooldown_remaining = get_ability_cooldown(ability.id);
                if (cooldown_remaining > 0) {
                    draw_set_color(ui_danger);
                    draw_text(status_x, info_y, "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: " + string(ceil(cooldown_remaining / 60)) + "—Å");
                } else {
                    draw_set_color(ui_success_color);
                    draw_text(status_x, info_y, "–ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
                    
                    // –ö–Ω–æ–ø–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    array_push(global.ability_buttons, {
                        type: "use_ability",
                        ability_id: ability.id,
                        x1: ability_x, y1: ability_y,
                        x2: ability_x + ability_width, y2: ability_y + ability_height
                    });
                }
            } else {
                draw_set_color(ui_success_color);
                draw_text(status_x, info_y, "–ò–∑—É—á–µ–Ω–æ");
            }
        } else {
            if (can_learn) {
                draw_set_color(ui_highlight);
                draw_text(status_x, info_y, "–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è");
                
                // –ö–Ω–æ–ø–∫–∞ –∏–∑—É—á–µ–Ω–∏—è
                array_push(global.ability_buttons, {
                    type: "learn_ability",
                    ability_id: ability.id,
                    x1: ability_x, y1: ability_y,
                    x2: ability_x + ability_width, y2: ability_y + ability_height
                });
            } else {
                draw_set_color(ui_danger);
                draw_text(status_x, info_y, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
            }
        }
    }
    
    // –ï—Å–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç
    if (array_length(global.abilities_database) == 0) {
        draw_set_color(ui_text_secondary);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text(x + width/2, y + height/2, "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã");
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
    
    // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤–Ω–∏–∑—É
    var hint_y = y + height - 30;
    draw_set_color(ui_text_secondary);
    draw_set_halign(fa_center);
    draw_text(x + width/2, hint_y, "üü¢ –ü–∞—Å—Å–∏–≤–Ω—ã–µ - –¥–µ–π—Å—Ç–≤—É—é—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ | üîµ –ê–∫—Ç–∏–≤–Ω—ã–µ - —Ç—Ä–µ–±—É—é—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ | üü° –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–µ - –º–æ—â–Ω—ã–µ —Å –¥–æ–ª–≥–æ–π –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–æ–π");
    draw_set_halign(fa_left);
}