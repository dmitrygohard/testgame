// scr_buff_system.gml

// –¢–∏–ø—ã –±–∞—Ñ–æ–≤
global.BUFF_TYPES = {
    STRENGTH: 0,      // + –∫ —Å–∏–ª–µ
    DEFENSE: 1,       // + –∫ –∑–∞—â–∏—Ç–µ  
    INTELLIGENCE: 2,  // + –∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É
    HEALTH: 3,        // + –∫ –∑–¥–æ—Ä–æ–≤—å—é
    SUCCESS: 4,       // + –∫ —à–∞–Ω—Å—É —É—Å–ø–µ—Ö–∞
    GOLD: 5,          // + –∫ –∑–æ–ª–æ—Ç—É
    SPEED: 6,         // + –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
    LUCK: 7,          // + –∫ —É–¥–∞—á–µ (—à–∞–Ω—Å –¥–≤–æ–π–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã)
    TEMP_STRENGTH: 8,
    TEMP_AGILITY: 9,
    TEMP_INTELLIGENCE: 10,
    TEMP_DEFENSE: 11
};

// –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–∞—Ñ–æ–≤
global.buff_database = [
    {   // –°–∏–ª–∞
        name: "‚öîÔ∏è –ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –°–∏–ª—ã",
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É –≥–µ—Ä–æ—è",
        icon: "üí™",
        type: global.BUFF_TYPES.STRENGTH,
        value: 5,
        duration: 1, // –Ω–∞ –æ–¥–Ω—É —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é
        color: make_color_rgb(255, 100, 100)
    },
    {   // –ó–∞—â–∏—Ç–∞
        name: "üõ°Ô∏è –ú–∞–≥–∏—á–µ—Å–∫–∏–π –©–∏—Ç",
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –≥–µ—Ä–æ—è", 
        icon: "üî∞",
        type: global.BUFF_TYPES.DEFENSE,
        value: 8,
        duration: 1,
        color: make_color_rgb(100, 150, 255)
    },
    {   // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
        name: "üìö –ú—É–¥—Ä–æ—Å—Ç—å –î—Ä–µ–≤–Ω–∏—Ö",
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≥–µ—Ä–æ—è",
        icon: "üß†", 
        type: global.BUFF_TYPES.INTELLIGENCE,
        value: 6,
        duration: 1,
        color: make_color_rgb(150, 100, 255)
    },
    {   // –ó–¥–æ—Ä–æ–≤—å–µ
        name: "‚ù§Ô∏è –ñ–∏–∑–Ω–µ–Ω–Ω–∞—è –≠–Ω–µ—Ä–≥–∏—è",
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
        icon: "üíì",
        type: global.BUFF_TYPES.HEALTH,
        value: 25,
        duration: 1,
        color: make_color_rgb(255, 50, 50)
    },
    {   // –®–∞–Ω—Å —É—Å–ø–µ—Ö–∞
        name: "üéØ –ë–µ–∑–æ—à–∏–±–æ—á–Ω–∞—è –¢–∞–∫—Ç–∏–∫–∞",
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏",
        icon: "‚≠ê",
        type: global.BUFF_TYPES.SUCCESS,
        value: 15,
        duration: 1, 
        color: make_color_rgb(255, 255, 100)
    },
    {   // –ó–æ–ª–æ—Ç–æ
        name: "üí∞ –ó–æ–ª–æ—Ç–æ–π –ë–ª–µ—Å–∫",
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º–æ–µ –∑–æ–ª–æ—Ç–æ",
        icon: "üíé",
        type: global.BUFF_TYPES.GOLD,
        value: 20,
        duration: 1,
        color: make_color_rgb(255, 215, 0)
    },
    {   // –°–∫–æ—Ä–æ—Å—Ç—å
        name: "‚ö° –°—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–π –ú–∞—Ä—à",
        description: "–£—Å–∫–æ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏",
        icon: "üèÉ",
        type: global.BUFF_TYPES.SPEED,
        value: 0.8, // –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏
        duration: 1,
        color: make_color_rgb(100, 255, 100)
    },
    {   // –£–¥–∞—á–∞
        name: "üçÄ –£–¥–∞—á–∞ –ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–∞", 
        description: "–®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –¥–≤–æ–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É",
        icon: "üé≤",
        type: global.BUFF_TYPES.LUCK,
        value: 25, // –ø—Ä–æ—Ü–µ–Ω—Ç —à–∞–Ω—Å–∞
        duration: 1,
        color: make_color_rgb(200, 100, 255)
    }
];

// –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã
global.active_buffs = [];

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–∞—Ñ–æ–≤
global.buff_system = {
    is_applying_buffs: false,
    current_buff_index: 0,
    buff_timer: 0,
    buff_duration: 60, // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã (60 –∫–∞–¥—Ä–æ–≤)
    selected_buffs: [],
    pending_expedition_difficulty: -1,
    waiting_for_expedition_start: false // –ù–û–í–û–ï: —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–∞—Ñ–æ–≤
function init_buff_system() {
    global.active_buffs = [];
    global.buff_system.is_applying_buffs = false;
    global.buff_system.current_buff_index = 0;
    global.buff_system.buff_timer = 0;
    global.buff_system.selected_buffs = [];
    global.buff_system.pending_expedition_difficulty = -1;
    global.buff_system.waiting_for_expedition_start = false;
}

/// @function clone_array(source_array)
/// @description –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä –±–∞—Ñ–æ–≤
function clone_array(source_array) {
    if (is_undefined(source_array)) return source_array;

    var len = array_length(source_array);
    var result = array_create(len);

    for (var i = 0; i < len; i++) {
        var value = source_array[i];

        if (is_array(value)) {
            value = clone_array(value);
        } else if (is_struct(value)) {
            value = clone_struct(value);
        }

        result[i] = value;
    }

    return result;
}

/// @function clone_struct(source_struct)
/// @description –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä (–±–∞—Ñ–æ–≤)
function clone_struct(source_struct) {
    if (is_undefined(source_struct)) return source_struct;

    var names = variable_struct_get_names(source_struct);
    var result = {};

    for (var i = 0; i < array_length(names); i++) {
        var key = names[i];
        var value = variable_struct_get(source_struct, key);

        if (is_array(value)) {
            value = clone_array(value);
        } else if (is_struct(value)) {
            value = clone_struct(value);
        }

        variable_struct_set(result, key, value);
    }

    return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞—Ñ–æ–≤ –æ—Ç –ø–æ–º–æ—â–Ω–∏—Ü
function get_buff_count_from_companions() {
    var total_buffs = 0;
    
    for (var i = 0; i < array_length(global.companions); i++) {
        var companion = global.companions[i];
        if (companion.unlocked && !companion.training) {
            // –ö–∞–∂–¥—ã–π —Ä–∞–Ω–≥ –¥–∞–µ—Ç +1 –±–∞—Ñ
            total_buffs += (companion.rank + 1);
        }
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –±–∞—Ñ–∞–º–∏
    return min(total_buffs, 3);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–º–æ—â–Ω–∏—Ü
function get_average_companion_level() {
    var total_level = 0;
    var count = 0;
    
    for (var i = 0; i < array_length(global.companions); i++) {
        if (global.companions[i].unlocked) {
            total_level += global.companions[i].level;
            count++;
        }
    }
    
    return count > 0 ? total_level / count : 0;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞—Ñ–æ–≤
function select_random_buffs() {
    var num_buffs = get_buff_count_from_companions();
    global.buff_system.selected_buffs = [];
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ñ–æ–≤
    var available_buffs = [];
    for (var i = 0; i < array_length(global.buff_database); i++) {
        array_push(available_buffs, clone_struct(global.buff_database[i]));
    }
    
    for (var i = 0; i < num_buffs; i++) {
        if (array_length(available_buffs) == 0) break;
        
        var random_index = irandom(array_length(available_buffs) - 1);
        var selected_buff = clone_struct(available_buffs[random_index]);

        // –£—Å–∏–ª–∏–≤–∞–µ–º –±–∞—Ñ—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–º–æ—â–Ω–∏—Ü - –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
        var avg_level = get_average_companion_level();
        selected_buff.value = selected_buff.value * (1 + avg_level * 0.1);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¢–û–õ–¨–ö–û –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        if (selected_buff.type == global.BUFF_TYPES.SPEED) {
            selected_buff.value = clamp(selected_buff.value, 0.5, 0.9);
        }
        
        array_push(global.buff_system.selected_buffs, selected_buff);
        array_delete(available_buffs, random_index, 1);
    }
    
    return global.buff_system.selected_buffs;
}
// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ñ–∞
function apply_current_buff() {
    if (global.buff_system.current_buff_index < array_length(global.buff_system.selected_buffs)) {
        var buff = global.buff_system.selected_buffs[global.buff_system.current_buff_index];
        array_push(global.active_buffs, buff);
        show_debug_message("Applying buff index: " + string(global.buff_system.current_buff_index));
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –±–∞—Ñ–∞
        apply_buff_effect(buff);
        
        add_notification("–ù–∞–ª–æ–∂–µ–Ω –±–∞—Ñ: " + buff.name);
        global.buff_system.current_buff_index++;
        global.buff_system.buff_timer = 0;
        
        return true;
    }
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –±–∞—Ñ–∞ –∫ –≥–µ—Ä–æ—é
function apply_buff_effect(buff) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
    var safe_buff = apply_safe_buff_value(buff);
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —á—Ç–æ–±—ã –æ–±—Ä–∞—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    buff.value = safe_buff.value;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ equipment_bonuses –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (!variable_struct_exists(global.hero, "equipment_bonuses")) {
        global.hero.equipment_bonuses = {};
    }

    if (!variable_struct_exists(global.hero.equipment_bonuses, "strength")) global.hero.equipment_bonuses.strength = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "defense")) global.hero.equipment_bonuses.defense = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "intelligence")) global.hero.equipment_bonuses.intelligence = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "max_health")) global.hero.equipment_bonuses.max_health = 0;
    switch(safe_buff.type) {
        case global.BUFF_TYPES.STRENGTH:
            global.hero.equipment_bonuses.strength += safe_buff.value; // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å—Ç–∞–∫–∞–Ω–∏–µ
            break;
        case global.BUFF_TYPES.DEFENSE:
            global.hero.equipment_bonuses.defense += safe_buff.value; // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å—Ç–∞–∫–∞–Ω–∏–µ
            break;
        case global.BUFF_TYPES.INTELLIGENCE:
            global.hero.equipment_bonuses.intelligence += safe_buff.value; // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å—Ç–∞–∫–∞–Ω–∏–µ
            break;
        case global.BUFF_TYPES.HEALTH:
            global.hero.equipment_bonuses.max_health += safe_buff.value; // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å—Ç–∞–∫–∞–Ω–∏–µ
            update_hero_max_health();
            break;
        // –°–∫–æ—Ä–æ—Å—Ç—å, —É—Å–ø–µ—Ö, –∑–æ–ª–æ—Ç–æ –∏ —É–¥–∞—á–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
    }
}


// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±–∞—Ñ–æ–≤
function update_buff_system() {
    if (global.buff_system.is_applying_buffs) {
        global.buff_system.buff_timer++;
        show_debug_message("–¢–∞–π–º–µ—Ä –±–∞—Ñ—Ñ–∞: " + string(global.buff_system.buff_timer) + "/" + string(global.buff_system.buff_duration));
        
        // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –±–∞—Ñ
        if (global.buff_system.buff_timer >= global.buff_system.buff_duration) {
            show_debug_message("–ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–∞—Ñ—Ñ ‚Ññ" + string(global.buff_system.current_buff_index));
            if (!apply_current_buff()) {
                // –í—Å–µ –±–∞—Ñ—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
                global.buff_system.is_applying_buffs = false;
                global.buff_system.waiting_for_expedition_start = true;
                add_notification("–í—Å–µ –±–∞—Ñ—Ñ—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã! –≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–∞–¥—Ä–µ...");
                
                show_debug_message("–í—Å–µ –±–∞—Ñ—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –æ–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏");
            }
        }
    } else if (global.buff_system.waiting_for_expedition_start) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–∞–¥—Ä–µ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –±–∞—Ñ–æ–≤
        show_debug_message("–ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é –ø–æ—Å–ª–µ –±–∞—Ñ–æ–≤: " + string(global.buff_system.pending_expedition_difficulty));
        
        if (global.buff_system.pending_expedition_difficulty != -1) {
            start_expedition_direct(global.buff_system.pending_expedition_difficulty);
            global.buff_system.pending_expedition_difficulty = -1;
        }
        
        global.buff_system.waiting_for_expedition_start = false;
        add_notification("–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!");
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –±–∞—Ñ—ã (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞)
    if (global.expedition.active && !global.buff_system.is_applying_buffs && !global.buff_system.waiting_for_expedition_start) {
        update_expedition();
    }
}
// scr_buff_system.gml - –æ–±–Ω–æ–≤–ª—è–µ–º start_expedition_direct

function start_expedition_direct(difficulty_index) {
    show_debug_message("=== start_expedition_direct –≤—ã–∑–≤–∞–Ω–∞ ===");
    
    if (!global.expedition.active && difficulty_index >= 0 && difficulty_index < array_length(global.expedition_difficulties)) {
        var diff = global.expedition_difficulties[difficulty_index];
        
        global.expedition.active = true;
        global.expedition.progress = 0;
        global.expedition.duration = diff.duration;
        global.expedition.difficulty = difficulty_index;
        global.expedition.boss_index = diff.boss;
        global.expedition.success_chance = calculate_success_chance(difficulty_index);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ—Ç –±–∞—Ñ–æ–≤
        apply_buff_modifiers_to_expedition();
        
        // –ü–†–ò–ú–ï–ù–Ø–ï–ú –ë–ê–§–´ –û–¢ –ü–†–ï–î–ú–ï–¢–û–í –≠–ö–ò–ü–ò–†–û–í–ö–ò
        if (variable_global_exists("apply_companion_item_buffs_to_expedition")) {
            apply_companion_item_buffs_to_expedition();
        }

        if (variable_global_exists("equipment_set_effects") && is_struct(global.equipment_set_effects)) {
            var set_effects = global.equipment_set_effects;
            if (set_effects.speed_multiplier != 1.0) {
                var clamped_speed = clamp(set_effects.speed_multiplier, 0.25, 1.0);
                global.expedition.duration = max(60, round(global.expedition.duration * clamped_speed));
            }

            if (set_effects.success_bonus != 0) {
                global.expedition.success_chance = clamp(global.expedition.success_chance + set_effects.success_bonus, 5, 95);
            }
        }

        add_notification("–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è '" + diff.name + "' –Ω–∞—á–∞–ª–∞—Å—å!");

        show_debug_message("–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞: " + diff.name + ", –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + string(global.expedition.duration));
    } else {
        show_debug_message("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏: active=" + string(global.expedition.active) + ", difficulty_index=" + string(difficulty_index));
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–Ω—è—Ç–∏—è –≤—Å–µ—Ö –±–∞—Ñ–æ–≤ –ø–æ—Å–ª–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
function remove_all_buffs() {
    // –°–Ω–∏–º–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –±–∞—Ñ–æ–≤
    for (var i = 0; i < array_length(global.active_buffs); i++) {
        var buff = global.active_buffs[i];
        remove_buff_effect(buff);
    }
    
    global.active_buffs = [];
    add_notification("–î–µ–π—Å—Ç–≤–∏–µ –±–∞—Ñ–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å");
}

// –§—É–Ω–∫—Ü–∏—è —Å–Ω—è—Ç–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞—Ñ–∞
function remove_buff_effect(buff) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ equipment_bonuses –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (!variable_struct_exists(global.hero, "equipment_bonuses")) {
        return;
    }
    
    switch(buff.type) {
        case global.BUFF_TYPES.STRENGTH:
            if (variable_struct_exists(global.hero.equipment_bonuses, "strength")) {
                global.hero.equipment_bonuses.strength -= buff.value;
            }
            break;
        case global.BUFF_TYPES.DEFENSE:
            if (variable_struct_exists(global.hero.equipment_bonuses, "defense")) {
                global.hero.equipment_bonuses.defense -= buff.value;
            }
            break;
        case global.BUFF_TYPES.INTELLIGENCE:
            if (variable_struct_exists(global.hero.equipment_bonuses, "intelligence")) {
                global.hero.equipment_bonuses.intelligence -= buff.value;
            }
            break;
        case global.BUFF_TYPES.HEALTH:
            if (variable_struct_exists(global.hero.equipment_bonuses, "max_health")) {
                global.hero.equipment_bonuses.max_health -= buff.value;
                update_hero_max_health();
            }
            break;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –æ—Ç –±–∞—Ñ–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
function get_buff_modifier(buff_type) {
    var modifier = 0;
    var multiplier = 1;
    
    for (var i = 0; i < array_length(global.active_buffs); i++) {
        var buff = global.active_buffs[i];
        if (buff.type == buff_type) {
            if (buff_type == global.BUFF_TYPES.SPEED) {
                // –¢–û–õ–¨–ö–û –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
                var speed_value = clamp(buff.value, 0.1, 0.9);
                multiplier *= speed_value;
            } else {
                // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∞—Ñ–æ–≤ - –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å—Ç–∞–∫–∞–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                modifier += buff.value;
            }
        }
    }
    
    return { additive: modifier, multiplicative: multiplier };
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –±–∞—Ñ–æ–≤
function draw_buff_application(x, y, width, height) {
    var center_x = x + width / 2;
    var center_y = y + height / 2;
    
    draw_set_color(ui_text);
    draw_set_halign(fa_center);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw_text(center_x, y + 30, "üé™ –ü–û–î–ì–û–¢–û–í–ö–ê –ö –≠–ö–°–ü–ï–î–ò–¶–ò–ò");
    draw_set_color(ui_text_secondary);
    draw_text(center_x, y + 55, "–ü–æ–º–æ—â–Ω–∏—Ü—ã –Ω–∞–∫–ª–∞–¥—ã–≤–∞—é—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞—Ñ—ã...");
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ñ–æ–≤
    var total_buffs = array_length(global.buff_system.selected_buffs);
    var current_buff = global.buff_system.current_buff_index;
    
    // –¢–∞–π–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ñ–∞
    var progress = global.buff_system.buff_timer / global.buff_system.buff_duration;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞
    draw_magic_circle(center_x, center_y, progress);
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–º–µ–Ω—è–µ–º–æ–≥–æ –±–∞—Ñ–∞
    if (current_buff < total_buffs) {
        var buff = global.buff_system.selected_buffs[current_buff];
        
        // –ò–∫–æ–Ω–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞—Ñ–∞
        draw_set_color(buff.color);
        draw_text(center_x, center_y - 60, buff.icon + " " + buff.name);
        
        draw_set_color(ui_text);
        draw_text(center_x, center_y - 30, buff.description);
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–∞—Ñ–∞
        var bar_width = 200;
        var bar_x = center_x - bar_width / 2;
        var bar_y = center_y + 40;
        
        draw_set_color(ui_bg_dark);
        draw_rectangle(bar_x, bar_y, bar_x + bar_width, bar_y + 15, false);
        
        draw_set_color(buff.color);
        draw_rectangle(bar_x, bar_y, bar_x + bar_width * progress, bar_y + 15, false);
        
        draw_set_color(ui_border_color);
        draw_rectangle(bar_x, bar_y, bar_x + bar_width, bar_y + 15, true);
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –±–∞—Ñ–æ–≤
    draw_set_color(ui_text_secondary);
    draw_text(center_x, center_y + 70, "–ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –±–∞—Ñ—ã:");
    
    var buffs_y = center_y + 90;
    for (var i = 0; i < current_buff; i++) {
        if (i < array_length(global.active_buffs)) {
            var applied_buff = global.active_buffs[i];
            draw_set_color(applied_buff.color);
            draw_text(center_x, buffs_y, applied_buff.icon + " " + applied_buff.name);
            buffs_y += 20;
        }
    }
    
    draw_set_halign(fa_left);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞
function draw_magic_circle(x, y, progress) {
    var base_radius = 50;
    var pulse_radius = base_radius + sin(global.frame_count * 0.2) * 10;
    
    // –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥
    draw_set_color(make_color_rgb(97, 175, 239));
    draw_set_alpha(0.3);
    draw_circle(x, y, pulse_radius, false);
    draw_set_alpha(1);
    
    // –í—Ä–∞—â–∞—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
    var symbols = ["‚ú®", "‚≠ê", "üîÆ", "üí´", "üåü"];
    for (var i = 0; i < array_length(symbols); i++) {
        var angle = (global.frame_count * 0.1) + (i * (360 / array_length(symbols)));
        var symbol_radius = base_radius + 20;
        var symbol_x = x + lengthdir_x(symbol_radius, angle);
        var symbol_y = y + lengthdir_y(symbol_radius, angle);
        
        draw_set_color(ui_text);
        draw_set_halign(fa_center);
        draw_text(symbol_x, symbol_y, symbols[i]);
    }
    
    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞
    draw_set_color(ui_highlight);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(x, y, "‚ö°");
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –±–∞—Ñ–∞
function get_buff_display_text(buff) {
    var value_text = "";
    
    switch(buff.type) {
        case global.BUFF_TYPES.STRENGTH:
        case global.BUFF_TYPES.DEFENSE:
        case global.BUFF_TYPES.INTELLIGENCE:
        case global.BUFF_TYPES.HEALTH:
            value_text = "+" + string(round(buff.value)); // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            break;
            
        case global.BUFF_TYPES.SUCCESS:
        case global.BUFF_TYPES.GOLD:
        case global.BUFF_TYPES.LUCK:
            value_text = "+" + string(round(buff.value)) + "%"; // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            break;
            
        case global.BUFF_TYPES.SPEED:
            // –î–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
            var safe_value = clamp(buff.value, 0.1, 0.9);
            var acceleration_percent = (1 - safe_value) * 100;
            value_text = "-" + string(round(max(0, acceleration_percent))) + "% –≤—Ä–µ–º–µ–Ω–∏";
            break;
            
        default:
            value_text = "+" + string(round(buff.value)); // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    }
    
    return value_text;
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –±–∞—Ñ–∞
function get_buff_color(buff) {
    return buff.color;
}

// –§—É–Ω–∫—Ü–∏—è —Å–Ω—è—Ç–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∞—Ñ–∞
function remove_temp_buff_effect(buff) {
    if (!variable_struct_exists(global.hero, "equipment_bonuses")) {
        return;
    }
    
    switch(buff.type) {
        case global.BUFF_TYPES.TEMP_STRENGTH:
            if (variable_struct_exists(global.hero.equipment_bonuses, "strength")) {
                global.hero.equipment_bonuses.strength -= buff.value;
            }
            break;
        case global.BUFF_TYPES.TEMP_AGILITY:
            if (variable_struct_exists(global.hero.equipment_bonuses, "agility")) {
                global.hero.equipment_bonuses.agility -= buff.value;
            }
            break;
        case global.BUFF_TYPES.TEMP_INTELLIGENCE:
            if (variable_struct_exists(global.hero.equipment_bonuses, "intelligence")) {
                global.hero.equipment_bonuses.intelligence -= buff.value;
            }
            break;
        case global.BUFF_TYPES.TEMP_DEFENSE:
            if (variable_struct_exists(global.hero.equipment_bonuses, "defense")) {
                global.hero.equipment_bonuses.defense -= buff.value;
            }
            break;
    }
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –ø–æ–º–æ—â–Ω–∏—Ü
    if (variable_global_exists("calculate_companion_bonuses")) {
        calculate_companion_bonuses();
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–∞—Ñ–æ–≤ (–≤—ã–∑—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
function update_temp_buffs() {
    if (!variable_global_exists("temp_buffs")) return;

    for (var i = array_length(global.temp_buffs) - 1; i >= 0; i--) {
        var buff = global.temp_buffs[i];
        if (global.frame_count - buff.start_time >= buff.duration) {
            remove_temp_buff_effect(buff);
            array_delete(global.temp_buffs, i, 1);
            add_notification("–î–µ–π—Å—Ç–≤–∏–µ " + buff.name + " –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å");
        }
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –±–∞—Ñ–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
function apply_safe_buff_value(buff) {
    if (buff.type == global.BUFF_TYPES.SPEED) {
        var safe_buff = clone_struct(buff);
        safe_buff.value = clamp(buff.value, 0.5, 0.9);
        return safe_buff;
    }

    return buff;
}
// –í –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ scr_buff_system.gml –¥–æ–±–∞–≤–ª—è–µ–º:

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
global.start_buff_application = function(difficulty_index) {
    show_debug_message(">>> start_buff_application –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: " + string(difficulty_index));
    
    global.buff_system.is_applying_buffs = true;
    global.buff_system.current_buff_index = 0;
    global.buff_system.buff_timer = 0;
    global.buff_system.waiting_for_expedition_start = false;
    global.active_buffs = []; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±–∞—Ñ—ã
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
    global.buff_system.pending_expedition_difficulty = difficulty_index;
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –±–∞—Ñ—ã
    select_random_buffs();
    show_debug_message("–í—ã–±—Ä–∞–Ω–æ –±–∞—Ñ—Ñ–æ–≤: " + string(array_length(global.buff_system.selected_buffs)));
    
    add_notification("–ü–æ–º–æ—â–Ω–∏—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å –±–∞—Ñ—ã...");
}

// –¢–∞–∫–∂–µ –æ–±—ä—è–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
global.get_buff_modifier = get_buff_modifier;
global.apply_buff_modifiers_to_expedition = apply_buff_modifiers_to_expedition;
global.remove_all_buffs = remove_all_buffs;
global.update_buff_system = update_buff_system;
/// @function get_rank_progress(companion_index)
/// @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
/// @param {real} companion_index - –ò–Ω–¥–µ–∫—Å –ø–æ–º–æ—â–Ω–∏—Ü—ã
/// @return {struct} {current: 0, required: 0, percent: 0}
function get_rank_progress(companion_index) {
    var companion = global.companions[companion_index];
    
    if (companion.rank >= companion.max_rank) {
        return {current: companion.level, required: companion.level, percent: 100};
    }
    
    var required_level = companion.rank_requirements[companion.rank];
    var progress = min(companion.level / required_level * 100, 100);
    
    return {
        current: companion.level,
        required: required_level,
        percent: progress
    };
}

/// @function get_rank_upgrade_cost(companion_index)
/// @description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–Ω–≥–∞
/// @param {real} companion_index - –ò–Ω–¥–µ–∫—Å –ø–æ–º–æ—â–Ω–∏—Ü—ã
/// @return {real} –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ –≤ –∑–æ–ª–æ—Ç–µ
function get_rank_upgrade_cost(companion_index) {
    var companion = global.companions[companion_index];
    var base_cost = 500;
    return base_cost * (companion.rank + 1);
}

/// @function can_upgrade_rank(companion_index)
/// @description –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—ã—Å–∏—Ç—å —Ä–∞–Ω–≥ –ø–æ–º–æ—â–Ω–∏—Ü—ã
/// @param {real} companion_index - –ò–Ω–¥–µ–∫—Å –ø–æ–º–æ—â–Ω–∏—Ü—ã
/// @return {bool} true –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —Ä–∞–Ω–≥
function can_upgrade_rank(companion_index) {
    var companion = global.companions[companion_index];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    if (!companion.unlocked) {
        return false;
    }
    
    if (companion.rank >= companion.max_rank) {
        return false; // –£–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥
    }
    
    var required_level = companion.rank_requirements[companion.rank];
    return companion.level >= required_level;
}

/// @function upgrade_companion_rank(companion_index)
/// @description –ü–æ–≤—ã—à–∞–µ—Ç —Ä–∞–Ω–≥ –ø–æ–º–æ—â–Ω–∏—Ü—ã
/// @param {real} companion_index - –ò–Ω–¥–µ–∫—Å –ø–æ–º–æ—â–Ω–∏—Ü—ã
/// @return {bool} true –µ—Å–ª–∏ —Ä–∞–Ω–≥ —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω
function upgrade_companion_rank(companion_index) {
    var companion = global.companions[companion_index];
    
    if (!can_upgrade_rank(companion_index)) {
        return false;
    }
    
    var cost = get_rank_upgrade_cost(companion_index);
    if (global.gold < cost) {
        add_notification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–Ω–≥–∞!");
        return false;
    }
    
    global.gold -= cost;
    companion.rank++;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã —Ä–∞–Ω–≥–∞
    apply_rank_bonuses(companion_index);
    
    add_notification(companion.name + " –ø–æ–≤—ã—à–µ–Ω –¥–æ —Ä–∞–Ω–≥–∞ " + string(companion.rank) + "!");
    return true;
}

/// @function apply_rank_bonuses(companion_index)
/// @description –ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–æ–Ω—É—Å—ã —Ä–∞–Ω–≥–∞ –ø–æ–º–æ—â–Ω–∏—Ü—ã
/// @param {real} companion_index - –ò–Ω–¥–µ–∫—Å –ø–æ–º–æ—â–Ω–∏—Ü—ã
function apply_rank_bonuses(companion_index) {
    var companion = global.companions[companion_index];
    
    // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Å–∏–ª–∏–≤–∞—é—Ç—Å—è —Å —Ä–∞–Ω–≥–æ–º
    var base_value = 0;
    
    switch(companion_index) {
        case 0: // Hepo
            base_value = 10 + (global.hero.strength * 0.2);
            switch(companion.rank) {
                case 1: companion.calculated_bonus = base_value * 1.5; break;
                case 2: companion.calculated_bonus = base_value * 2.0; break;
                case 3: companion.calculated_bonus = base_value * 2.5; break;
                default: companion.calculated_bonus = base_value; break; // –ó–ê–©–ò–¢–ê –û–¢ –ù–ï–ò–ó–í–ï–°–¢–ù–û–ì–û –†–ê–ù–ì–ê
            }
            break;
            
        case 1: // Fatty
            base_value = 15 + (global.hero.agility * 0.2);
            switch(companion.rank) {
                case 1: companion.calculated_bonus = base_value * 1.5; break;
                case 2: companion.calculated_bonus = base_value * 2.0; break;
                case 3: companion.calculated_bonus = base_value * 2.5; break;
                default: companion.calculated_bonus = base_value; break; // –ó–ê–©–ò–¢–ê –û–¢ –ù–ï–ò–ó–í–ï–°–¢–ù–û–ì–û –†–ê–ù–ì–ê
            }
            break;
            
        case 2: // Discipline
            base_value = 12 + (global.hero.intelligence * 0.2);
            switch(companion.rank) {
                case 1: companion.calculated_bonus = base_value * 1.5; break;
                case 2: companion.calculated_bonus = base_value * 2.0; break;
                case 3: companion.calculated_bonus = base_value * 2.5; break;
                default: companion.calculated_bonus = base_value; break; // –ó–ê–©–ò–¢–ê –û–¢ –ù–ï–ò–ó–í–ï–°–¢–ù–û–ì–û –†–ê–ù–ì–ê
            }
            break;
    }
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã
    calculate_companion_bonuses();
}
function calculate_companion_bonuses() {
    if (!variable_global_exists("hero") || !variable_global_exists("companions")) {
        return;
    }
    
    // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è + –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≥–µ—Ä–æ—è
    var strength_factor = global.hero.strength * 0.3;
    var agility_factor = global.hero.agility * 0.3;
    var intelligence_factor = global.hero.intelligence * 0.3;
    
    for (var i = 0; i < array_length(global.companions); i++) {
        var companion = global.companions[i];
        var level_bonus = companion.level * 2; // –ë–æ–Ω—É—Å –æ—Ç —É—Ä–æ–≤–Ω—è
        
        switch(i) {
            case 0: // Hepo - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –°–ò–õ–´ –≥–µ—Ä–æ—è
                var hepo_bonus = 10 + level_bonus + strength_factor;
                companion.calculated_bonus = min(hepo_bonus, 50);
                companion.effect = "+" + string(floor(companion.calculated_bonus)) + "% –∫ —à–∞–Ω—Å—É —É—Å–ø–µ—Ö–∞ (–°–∏–ª–∞)";
                break;
                
            case 1: // Fatty - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –õ–û–í–ö–û–°–¢–ò –≥–µ—Ä–æ—è  
                var fatty_bonus = 15 + level_bonus + agility_factor;
                companion.calculated_bonus = min(fatty_bonus, 60);
                companion.effect = "+" + string(floor(companion.calculated_bonus)) + "% –∫ –∑–¥–æ—Ä–æ–≤—å—é (–õ–æ–≤–∫–æ—Å—Ç—å)";
                break;
                
            case 2: // Discipline - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ò–ù–¢–ï–õ–õ–ï–ö–¢–ê –≥–µ—Ä–æ—è
                var discipline_bonus = 12 + level_bonus + intelligence_factor;
                companion.calculated_bonus = min(discipline_bonus, 45);
                companion.effect = "+" + string(floor(companion.calculated_bonus)) + "% –∫ –∑–æ–ª–æ—Ç—É (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)";
                break;
        }
    }
}

function get_active_companion_bonuses() {
    var bonuses = {
        success_chance: 0,
        health: 0,
        gold: 0
    };
    
    if (!variable_global_exists("companions")) {
        return bonuses;
    }
    
    for (var i = 0; i < array_length(global.companions); i++) {
        var companion = global.companions[i];
        if (companion.unlocked && !companion.training) {
            switch(i) {
                case 0: // Hepo
                    bonuses.success_chance += companion.calculated_bonus;
                    break;
                case 1: // Fatty
                    bonuses.health += companion.calculated_bonus;
                    break;
                case 2: // Discipline
                    bonuses.gold += companion.calculated_bonus;
                    break;
            }
        }
    }
    
    return bonuses;
}

function refresh_companion_display() {
    calculate_companion_bonuses();
}
// scr_expedition_system.gml

// scr_expedition_system.gml
// 5 —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π
global.expedition_difficulties = [
    { 
        name: "–û—á–µ–Ω—å –ª–µ–≥–∫–∞—è", 
        level: 1, 
        reward_min: 50, 
        reward_max: 100, 
        duration: 300, 
        boss: -1,
        description: "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤. –ë–µ–∑ –±–æ—Å—Å–æ–≤."
    },
    { 
        name: "–õ–µ–≥–∫–∞—è", 
        level: 2, 
        reward_min: 100, 
        reward_max: 200, 
        duration: 450, 
        boss: -1,
        description: "–ü—Ä–æ—Å—Ç–∞—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è. –ë–µ–∑ –±–æ—Å—Å–æ–≤."
    },
    { 
        name: "–°—Ä–µ–¥–Ω—è—è", 
        level: 3, 
        reward_min: 200, 
        reward_max: 400, 
        duration: 600, 
        boss: 0, // Hepo
        description: "–ü–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å –±–æ—Å—Å–æ–º: Hepo"
    },
    { 
        name: "–°–ª–æ–∂–Ω–∞—è", 
        level: 4, 
        reward_min: 400, 
        reward_max: 800, 
        duration: 750, 
        boss: 1, // Fatty
        description: "–û–ø–∞—Å–Ω—ã–π –±–æ—Å—Å: Fatty"
    },
    { 
        name: "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è", 
        level: 5, 
        reward_min: 800, 
        reward_max: 1600, 
        duration: 900, 
        boss: 2, // Discipline
        description: "–°–º–µ—Ä—Ç–µ–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –±–æ—Å—Å: Discipline"
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
if (!variable_global_exists("expedition")) {
    global.expedition = {
        active: false,
        progress: 0,
        duration: 0,
        difficulty: 0,
        boss_index: -1,
        success_chance: 0
    };
}

function start_expedition(difficulty_index) {
    show_debug_message("=== start_expedition –≤—ã–∑–≤–∞–Ω–∞ ===");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    if (difficulty_index > global.max_available_difficulty) {
        add_notification("–≠—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ.");
        return;
    }
    
    if (!global.expedition.active && difficulty_index >= 0 && difficulty_index < array_length(global.expedition_difficulties)) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏—Ü—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã
        var has_companions = false;
        for (var i = 0; i < array_length(global.companions); i++) {
            if (global.companions[i].unlocked && !global.companions[i].training) {
                has_companions = true;
                break;
            }
        }
        
        if (has_companions && array_length(global.active_buffs) == 0) {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–ª–æ–∂–µ–Ω–∏—è –±–∞—Ñ–æ–≤ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            show_debug_message("–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –±–∞—Ñ–æ–≤ –¥–ª—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: " + string(difficulty_index));
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if (variable_global_exists("start_buff_application")) {
                global.start_buff_application(difficulty_index);
            } else {
                // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
                show_debug_message("–§—É–Ω–∫—Ü–∏—è start_buff_application –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é");
                start_expedition_direct(difficulty_index);
            }
            return;
        }
        
        // –ï—Å–ª–∏ –±–∞—Ñ—ã —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏–ª–∏ –ø–æ–º–æ—â–Ω–∏—Ü –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–∑—É
        start_expedition_direct(difficulty_index);
    }
}



// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –±–∞—Ñ–æ–≤ –∫ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
function apply_buff_modifiers_to_expedition() {
    var speed_mod = get_buff_modifier(global.BUFF_TYPES.SPEED);
    if (speed_mod.multiplicative != 1) {
        // –¢–û–õ–¨–ö–û –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        var speed_multiplier = clamp(speed_mod.multiplicative, 0.1, 0.95);
        global.expedition.duration = round(global.expedition.duration * speed_multiplier);
    }
    
    // –î–ª—è —É—Å–ø–µ—Ö–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤ calculate_success_chance)
    var success_mod = get_buff_modifier(global.BUFF_TYPES.SUCCESS);
    if (success_mod.additive != 0) {
        global.expedition.success_chance += success_mod.additive;
    }
}
function calculate_success_chance(difficulty_index) {
    if (!variable_global_exists("expedition_difficulties") || difficulty_index < 0 || difficulty_index >= array_length(global.expedition_difficulties)) {
        return 50;
    }
    
    var base_chance = 95 - (difficulty_index * 15);
    
    // –ë–æ–Ω—É—Å—ã –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è
    var hero_bonus = 0;
    if (variable_global_exists("hero")) {
        hero_bonus = (global.hero.strength + global.hero.agility + global.hero.intelligence) * 0.1;
    }
    
    // –ë–æ–Ω—É—Å—ã –æ—Ç –ø–æ–º–æ—â–Ω–∏—Ü
    var companion_bonus = 0;
    if (variable_global_exists("get_active_companion_bonuses")) {
        var companion_bonuses = get_active_companion_bonuses();
        companion_bonus = companion_bonuses.success_chance;
    }
    
    // –ë–æ–Ω—É—Å—ã –æ—Ç –±–∞—Ñ—Ñ–æ–≤
    var buff_bonus = 0;
    if (variable_global_exists("get_buff_modifier")) {
        var success_buff = get_buff_modifier(global.BUFF_TYPES.SUCCESS);
        buff_bonus = success_buff.additive;
    }
    
    var total_chance = base_chance + hero_bonus + companion_bonus + buff_bonus;
    return clamp(total_chance, 5, 95);
}
function update_expedition() {
    if (global.expedition.active) {
        global.expedition.progress++;
        
        // –î–∞–µ–º –æ–ø—ã—Ç –ø–æ–º–æ—â–Ω–∏—Ü–∞–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
        if (global.expedition.progress mod 600 == 0) { // 600 –∫–∞–¥—Ä–æ–≤ = 10 —Å–µ–∫—É–Ω–¥
            add_companion_exp_in_expedition();
        }
        
        if (global.expedition.progress >= global.expedition.duration) {
            complete_expedition();
        }
    }
}

// scr_expedition_system.gml - –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é complete_expedition

function complete_expedition() {
    var success = random(100) < global.expedition.success_chance;
    var diff = global.expedition_difficulties[global.expedition.difficulty];
    
    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    var gold_reward = irandom_range(diff.reward_min, diff.reward_max);
    var exp_reward = 25 * (global.expedition.difficulty + 1);

    var equipment_effects = undefined;
    if (variable_global_exists("equipment_set_effects")) {
        equipment_effects = global.equipment_set_effects;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–æ–π–Ω—É—é –∞—Ç–∞–∫—É
    var is_double_attack = handle_double_attack();
    if (is_double_attack) {
        gold_reward *= 2;
        exp_reward *= 2;
        add_notification("‚öîÔ∏è –î–≤–æ–π–Ω–æ–π —É–¥–∞—Ä! –ù–∞–≥—Ä–∞–¥–∞ —É–¥–≤–æ–µ–Ω–∞!");
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—ã –æ—Ç –ö–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ü–æ–±–µ–¥—ã
    gold_reward = floor(gold_reward * global.expedition_reward_multiplier);
    exp_reward = floor(exp_reward * global.expedition_reward_multiplier);

    if (is_struct(equipment_effects)) {
        gold_reward = floor(gold_reward * equipment_effects.reward_multiplier);
        exp_reward = floor(exp_reward * equipment_effects.reward_multiplier);
    }

    // –ë–æ–Ω—É—Å –æ—Ç –±–∞—Ñ–æ–≤ –∏ –ø–æ–º–æ—â–Ω–∏—Ü
    var gold_mod = get_buff_modifier(global.BUFF_TYPES.GOLD);
    gold_reward = gold_reward * (1 + gold_mod.additive / 100);

    var companion_bonuses = get_active_companion_bonuses();
    gold_reward = gold_reward * (1 + companion_bonuses.gold / 100);

    // –ë–ê–§ –û–¢ –ü–†–ï–î–ú–ï–¢–û–í: –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∫ –∑–æ–ª–æ—Ç—É)
    var discipline_item_buff = get_companion_buff_modifier("discipline_gold");
    gold_reward = gold_reward * (1 + discipline_item_buff / 100);

    if (variable_struct_exists(global.hero.equipment_bonuses, "gold_bonus")) {
        gold_reward = gold_reward * (1 + global.hero.equipment_bonuses.gold_bonus / 100);
    }

    // –ë–ê–§ –û–¢ –ü–†–ï–î–ú–ï–¢–û–í: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–≤–æ–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
    var reward_multiplier = check_double_rewards_chance();
    gold_reward = floor(gold_reward * reward_multiplier);
    exp_reward = floor(exp_reward * reward_multiplier);
    
    if (success) {
        global.gold += gold_reward;
        add_hero_exp(exp_reward);
        
        // –£—Ä–æ–Ω –≥–µ—Ä–æ—é –¥–∞–∂–µ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        var damage = irandom_range(5, 15) * (global.expedition.difficulty + 1);
        var actual_damage = hero_take_damage(damage);
        
        // –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª—è
        var item_chance = 10 + (global.expedition.difficulty * 15);
        var drop_multiplier = global.expedition_reward_multiplier;
        if (is_struct(equipment_effects)) {
            drop_multiplier *= equipment_effects.reward_multiplier;
        }

        if (random(100) < item_chance * drop_multiplier) {
            var item_id = get_random_expedition_item(global.expedition.difficulty);
            if (AddItemToInventory(item_id, 1)) {
                var item_data = ds_map_find_value(global.ItemDB, item_id);
                add_notification("–ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: " + item_data[? "name"]);
            }
        }
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–º–æ—â–Ω–∏—Ü—ã –ø—Ä–∏ –ø–æ–±–µ–¥–µ –Ω–∞–¥ –±–æ—Å—Å–æ–º
        if (global.expedition.boss_index != -1 && !global.companions[global.expedition.boss_index].unlocked) {
            global.companions[global.expedition.boss_index].unlocked = true;
            global.arenas[global.expedition.boss_index].unlocked = true;
            add_notification("–ü–æ–º–æ—â–Ω–∏—Ü–∞ " + global.companions[global.expedition.boss_index].name + " –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –∫ –æ—Ç—Ä—è–¥—É!");
        }
        
        // –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if (global.expedition.difficulty == global.max_available_difficulty) {
            global.max_available_difficulty = min(global.max_available_difficulty + 1, array_length(global.expedition_difficulties) - 1);
            if (global.max_available_difficulty < array_length(global.expedition_difficulties) - 1) {
                var next_diff = global.expedition_difficulties[global.max_available_difficulty];
                add_notification("–û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: " + next_diff.name + "!");
            }
        }
        
        // –û–ø—ã—Ç –ø–æ–º–æ—â–Ω–∏—Ü–∞–º
        var companion_exp = 20 * (global.expedition.difficulty + 1);
        for (var i = 0; i < array_length(global.companions); i++) {
            var companion = global.companions[i];
            if (companion.unlocked && !companion.training) {
                add_companion_exp(i, companion_exp);
            }
        }
        
        add_notification("–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! +" + string(floor(gold_reward)) + " –∑–æ–ª–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ " + string(actual_damage) + " —É—Ä–æ–Ω–∞");

        // –ê–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä –¥–ª—è –≠–≥–∏–¥—ã –∏ –ì—É–Ω–≥–Ω–∏—Ä–∞
        if (global.expedition_auto_repeat.enabled && global.expedition_auto_repeat.difficulties[global.expedition.difficulty]) {
            global.expedition_auto_repeat.completed_count++;
            add_notification("üîÅ –ê–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä: —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–Ω–æ–≤–∞! (‚Ññ" + string(global.expedition_auto_repeat.completed_count) + ")");
            start_expedition(global.expedition.difficulty);
            return; // –ù–µ —Å–Ω–∏–º–∞–µ–º –±–∞—Ñ—ã –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é
        }

        check_trophies_after_expedition(true, gold_reward, actual_damage);

    } else {
        var damage = irandom_range(20, 40) * (global.expedition.difficulty + 1);
        var actual_damage = hero_take_damage(damage);
        add_notification("–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å! –ü–æ–ª—É—á–µ–Ω–æ " + string(actual_damage) + " —É—Ä–æ–Ω–∞");

        check_trophies_after_expedition(false, 0, actual_damage);
    }
    
    // –°–Ω–∏–º–∞–µ–º –±–∞—Ñ—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ-–ø–æ–≤—Ç–æ—Ä)
    if (!global.expedition_auto_repeat.enabled || !global.expedition_auto_repeat.difficulties[global.expedition.difficulty]) {
        if (variable_global_exists("remove_all_buffs")) {
            global.remove_all_buffs();
        } else {
            global.active_buffs = [];
        }
        global.expedition.active = false;
    }
}
// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
function get_random_expedition_item(difficulty) {
    var available_items = [];
    
    var map = ds_map_create();
    var count = ds_map_size(global.ItemDB);
    var key = ds_map_find_first(global.ItemDB);
    
    for (var i = 0; i < count; i++) {
        var item = ds_map_find_value(global.ItemDB, key);
        var item_rarity = item[? "rarity"];
        if (item[? "type"] == global.ITEM_TYPE.TROPHY || item[? "item_class"] == "trophy") {
            key = ds_map_find_next(global.ItemDB, key);
            continue;
        }

        // –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–¥–∫–æ—Å—Ç–∏
        var max_rarity = floor(difficulty / 2) + 1;
        if (item_rarity <= max_rarity) {
            // –£—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å —Ä–µ–¥–∫–æ—Å—Ç–∏ (–±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤—ã–ø–∞–¥–∞—é—Ç —Ä–µ–∂–µ)
            var weight = 10 - (item_rarity * 2);
            for (var j = 0; j < weight; j++) {
                array_push(available_items, key);
            }
        }
        
        key = ds_map_find_next(global.ItemDB, key);
    }
    ds_map_destroy(map);
    
    if (array_length(available_items) > 0) {
        return available_items[irandom(array_length(available_items) - 1)];
    }
    
    return "health_potion"; // fallback
}
/// @function update_hero_max_health()
/// @description –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –≥–µ—Ä–æ—è —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤
function update_hero_max_health() {
    var base_health = 100 + (global.hero.strength * 5);
    var bonus_health = global.hero.equipment_bonuses.max_health;
    
    // –ë–æ–Ω—É—Å –æ—Ç Fatty –∫ –∑–¥–æ—Ä–æ–≤—å—é
    var companion_bonuses = get_active_companion_bonuses();
    var health_multiplier = 1 + (companion_bonuses.health / 100);
    
    global.hero.max_health = (base_health + bonus_health) * health_multiplier;
    
    // –ù–µ –¥–∞–µ–º —Ç–µ–∫—É—â–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é –ø—Ä–µ–≤—ã—Å–∏—Ç—å –º–∞–∫—Å–∏–º—É–º
    if (global.hero.health > global.hero.max_health) {
        global.hero.health = global.hero.max_health;
    }
}

function hero_take_damage(damage_amount) {
    // –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –±—Ä–æ–Ω–∏ –∏ –±–∞—Ñ–æ–≤
    var defense = get_total_defense(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –∑–∞—â–∏—Ç—É —Å —É—á–µ—Ç–æ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
    var actual_damage = max(1, damage_amount - defense * 0.5);
    
    global.hero.health -= actual_damage;
    
    if (global.hero.health <= 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ –§–µ–Ω–∏–∫—Å–∞
        if (!handle_phoenix_rebirth()) {
            global.hero.health = 0;
            global.hero.is_injured = true;
            add_notification("–ì–µ—Ä–æ–π —Ç—è–∂–µ–ª–æ —Ä–∞–Ω–µ–Ω! –ù—É–∂–Ω–æ –ª–µ—á–µ–Ω–∏–µ!");
        }
    } else if (global.hero.health < global.hero.max_health * 0.3) {
        add_notification("–ì–µ—Ä–æ–π —Å–∏–ª—å–Ω–æ —Ä–∞–Ω–µ–Ω! –ó–¥–æ—Ä–æ–≤—å–µ: " + string(floor(global.hero.health)));
    }
    
    return actual_damage;
}

/// @function hero_heal(heal_amount)
/// @description –õ–µ—á–∏—Ç –≥–µ—Ä–æ—è
/// @param {real} heal_amount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
function hero_heal(heal_amount) {
    var old_health = global.hero.health;
    global.hero.health += heal_amount;
    
    if (global.hero.health > global.hero.max_health) {
        global.hero.health = global.hero.max_health;
    }
    
    var actual_heal = global.hero.health - old_health;
    
    // –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –≤—ã—à–µ 50%
    if (global.hero.health >= global.hero.max_health * 0.5) {
        global.hero.is_injured = false;
    }
    
    return actual_heal;
}

/// @function hero_rest()
/// @description –ì–µ—Ä–æ–π –æ—Ç–¥—ã—Ö–∞–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ
function hero_rest() {
    if (!global.expedition.active && global.hero.health < global.hero.max_health) {
        var heal_amount = global.hero.max_health * 0.1; // 10% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞ –∑–∞ –æ—Ç–¥—ã—Ö
        var actual_heal = hero_heal(heal_amount);
        
        add_notification("–ì–µ—Ä–æ–π –æ—Ç–¥—ã—Ö–∞–µ—Ç... +" + string(floor(actual_heal)) + " –∑–¥–æ—Ä–æ–≤—å—è");
        
        // –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        if (global.hero.health >= global.hero.max_health) {
            global.hero.health = global.hero.max_health;
            add_notification("–ì–µ—Ä–æ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–¥–æ—Ö–Ω—É–ª!");
        }
        
        return true;
    }
    return false;
}

// –û–ë–ù–û–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é use_health_potion –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:

function use_health_potion() {
    // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    return use_potion("health_potion");
}

/// @function update_health_system()
/// @description –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º—É –∑–¥–æ—Ä–æ–≤—å—è (–≤—ã–∑—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —à–∞–≥)
function update_health_system() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏ –æ—Ç–¥—ã—Ö–µ
    if (!global.expedition.active && global.hero.health < global.hero.max_health) {
        global.hero.rest_timer++;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 1% –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (–ø—Ä–∏ 60 FPS)
        if (global.hero.rest_timer >= 300) { // 300 –∫–∞–¥—Ä–æ–≤ = 5 —Å–µ–∫—É–Ω–¥
            hero_rest();
            global.hero.rest_timer = 0;
        }
    } else {
        global.hero.rest_timer = 0;
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–∞—Ñ–æ–≤
function update_expedition_during_buffs() {
    if (global.expedition.active && !global.buff_system.is_applying_buffs && !global.buff_system.waiting_for_expedition_start) {
        update_expedition();
    }
}

// scr_buff_system.gml - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞

// –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–∞—Ñ–æ–≤ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
global.companion_buff_items = [];

function update_companion_buff_system() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –±–∞—Ñ—ã –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    global.companion_buff_items = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –±–∞—Ñ–∞–º–∏
    for (var hero_index = 0; hero_index < array_length(global.equipment_slots); hero_index++) {
        var equipment = global.equipment_slots[hero_index];
        var slot_names = variable_struct_get_names(equipment);
        
        for (var i = 0; i < array_length(slot_names); i++) {
            var item_id = variable_struct_get(equipment, slot_names[i]);
            if (item_id != -1) {
                var item_data = ds_map_find_value(global.ItemDB, item_id);
                if (item_data != -1) {
                    var companion_buff = item_data[? "companion_buff"];
                    if (!is_undefined(companion_buff)) {
                        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞—Ñ –≤ —Å–∏—Å—Ç–µ–º—É
                        var buff_power = item_data[? "buff_power"];
                        if (is_undefined(buff_power)) buff_power = 0;
                        
                        array_push(global.companion_buff_items, {
                            buff_type: companion_buff,
                            power: buff_power,
                            source_item: item_id,
                            hero_index: hero_index
                        });
                        
                        show_debug_message("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–∞—Ñ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞: " + companion_buff + " —Å —Å–∏–ª–æ–π: " + string(buff_power));
                    }
                }
            }
        }
    }
}

function get_companion_buff_modifier(buff_type) {
    var total_power = 0;
    
    for (var i = 0; i < array_length(global.companion_buff_items); i++) {
        var buff_item = global.companion_buff_items[i];
        if (buff_item.buff_type == buff_type) {
            total_power += buff_item.power;
        }
    }
    
    return total_power;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–∞—Ñ–æ–≤ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
function apply_companion_item_buffs_to_expedition() {
    if (!global.expedition.active) return;
    
    var success_buff = get_companion_buff_modifier("hepo_success");
    var health_buff = get_companion_buff_modifier("fatty_health");
    var gold_buff = get_companion_buff_modifier("discipline_gold");
    var all_buffs_boost = get_companion_buff_modifier("all_buffs_boost");
    var speed_buff = get_companion_buff_modifier("expedition_speed");
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—ã –∫ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
    if (success_buff > 0) {
        global.expedition.success_chance += success_buff;
        show_debug_message("–ë–∞—Ñ –•—ç–ø–æ: +" + string(success_buff) + "% –∫ —à–∞–Ω—Å—É —É—Å–ø–µ—Ö–∞");
    }
    
    if (health_buff > 0) {
        // –ë–∞—Ñ –§—ç—Ç—Ç–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –æ—Ç—Ä—è–¥–∞
        var health_multiplier = 1 + (health_buff / 100);
        global.hero.max_health *= health_multiplier;
        global.hero.health *= health_multiplier;
        show_debug_message("–ë–∞—Ñ –§—ç—Ç—Ç–∏: +" + string(health_buff) + "% –∫ –∑–¥–æ—Ä–æ–≤—å—é");
    }
    
    if (gold_buff > 0) {
        // –ë–∞—Ñ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ complete_expedition)
        show_debug_message("–ë–∞—Ñ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: +" + string(gold_buff) + "% –∫ –∑–æ–ª–æ—Ç—É");
    }
    
    if (speed_buff > 0) {
        global.expedition.duration = round(global.expedition.duration * (1 - speed_buff / 100));
        show_debug_message("–ë–∞—Ñ –∫–æ–º–ø–∞—Å–∞: -" + string(speed_buff) + "% –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏");
    }
    
    if (all_buffs_boost > 0) {
        // –£—Å–∏–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—ã
        for (var i = 0; i < array_length(global.active_buffs); i++) {
            global.active_buffs[i].value *= (1 + all_buffs_boost / 100);
        }
        show_debug_message("–ë–∞—Ñ –¢—Ä–æ–∏—Ü—ã: +" + string(all_buffs_boost) + "% –∫–æ –≤—Å–µ–º –±–∞—Ñ–∞–º");
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∞–Ω—Å–∞ —É–¥–≤–æ–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
function check_double_rewards_chance() {
    var double_rewards_chance = get_companion_buff_modifier("double_rewards");
    if (double_rewards_chance > 0 && random(100) < double_rewards_chance) {
        add_notification("üé≤ –£–¥–∞—á–∞! –ù–∞–≥—Ä–∞–¥–∞ —É–¥–≤–æ–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –ö–æ—Å—Ç—è–º —É–¥–∞—á–∏!");
        return 2.0;
    }
    return 1.0;
}
// scr_buff_system.gml - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–∞—Ñ–∞
function apply_temp_buff_effect(buff) {
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –°–í–û–ô–°–¢–í–ê equipment_bonuses –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (!variable_struct_exists(global.hero, "equipment_bonuses")) {
        global.hero.equipment_bonuses = {};
    }
    
    if (!variable_struct_exists(global.hero.equipment_bonuses, "strength")) global.hero.equipment_bonuses.strength = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "agility")) global.hero.equipment_bonuses.agility = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "intelligence")) global.hero.equipment_bonuses.intelligence = 0;
    if (!variable_struct_exists(global.hero.equipment_bonuses, "defense")) global.hero.equipment_bonuses.defense = 0;
    
    switch(buff.type) {
        case global.BUFF_TYPES.TEMP_STRENGTH:
            global.hero.equipment_bonuses.strength += buff.value;
            break;
        case global.BUFF_TYPES.TEMP_AGILITY:
            global.hero.equipment_bonuses.agility += buff.value;
            break;
        case global.BUFF_TYPES.TEMP_INTELLIGENCE:
            global.hero.equipment_bonuses.intelligence += buff.value;
            break;
        case global.BUFF_TYPES.TEMP_DEFENSE:
            global.hero.equipment_bonuses.defense += buff.value;
            break;
    }
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –ø–æ–º–æ—â–Ω–∏—Ü
    if (variable_global_exists("calculate_companion_bonuses")) {
        calculate_companion_bonuses();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–∞—Ñ–æ–≤
function get_temp_buff_modifier(buff_type) {
    var modifier = 0;
    
    if (!variable_global_exists("temp_buffs")) return modifier;
    
    for (var i = 0; i < array_length(global.temp_buffs); i++) {
        var buff = global.temp_buffs[i];
        if (buff.type == buff_type) {
            modifier += buff.value;
        }
    }
    
    return modifier;
}