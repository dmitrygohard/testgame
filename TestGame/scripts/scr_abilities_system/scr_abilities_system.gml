// scr_abilities_system.gml
// –°–∏—Å—Ç–µ–º–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è

// –¢–∏–ø—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
global.ABILITY_TYPE = {
    ACTIVE: 0,      // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (—Ç—Ä–µ–±—É—é—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
    PASSIVE: 1,     // –ü–∞—Å—Å–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (–¥–µ–π—Å—Ç–≤—É—é—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ)
    ULTIMATE: 2     // –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (–¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞)
};

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
global.abilities_database = [
    {   // –ê–ö–¢–ò–í–ù–´–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò
        id: "double_strike",
        name: "‚öîÔ∏è –î–≤–æ–π–Ω–æ–π –£–¥–∞—Ä",
        description: "–°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ –Ω–∞–Ω–æ—Å–∏—Ç –¥–≤–æ–π–Ω–æ–π —É—Ä–æ–Ω",
        type: global.ABILITY_TYPE.ACTIVE,
        icon: "‚öîÔ∏è",
        level_required: 5,
        mana_cost: 20,
        cooldown: 300, // 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ 60 FPS
        duration: 0,
        effect: function() {
            // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∞—Ç–∞–∫–µ
            global.hero.next_attack_double = true;
            add_notification("‚öîÔ∏è –î–≤–æ–π–Ω–æ–π —É–¥–∞—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
        },
        color: make_color_rgb(255, 100, 100)
    },
    {
        id: "healing_light",
        name: "üí´ –ò—Å—Ü–µ–ª—è—é—â–∏–π –°–≤–µ—Ç", 
        description: "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 30% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è",
        type: global.ABILITY_TYPE.ACTIVE,
        icon: "üí´",
        level_required: 8,
        mana_cost: 30,
        cooldown: 450, // 7.5 —Å–µ–∫—É–Ω–¥
        duration: 0,
        effect: function() {
            var heal_amount = global.hero.max_health * 0.3;
            var actual_heal = hero_heal(heal_amount);
            add_notification("üí´ –ò—Å—Ü–µ–ª—è—é—â–∏–π —Å–≤–µ—Ç! +" + string(floor(actual_heal)) + " HP");
        },
        color: make_color_rgb(86, 213, 150)
    },
    {
        id: "battle_fury",
        name: "üî• –ë–æ–µ–≤–∞—è –Ø—Ä–æ—Å—Ç—å",
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É –Ω–∞ 50% –Ω–∞ 15 —Å–µ–∫—É–Ω–¥",
        type: global.ABILITY_TYPE.ACTIVE,
        icon: "üî•",
        level_required: 12,
        mana_cost: 40,
        cooldown: 600, // 10 —Å–µ–∫—É–Ω–¥
        duration: 900, // 15 —Å–µ–∫—É–Ω–¥
        effect: function() {
            var temp_buff = {
                name: "–ë–æ–µ–≤–∞—è –Ø—Ä–æ—Å—Ç—å",
                description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É –Ω–∞ 50%",
                icon: "üî•",
                type: -1, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
                value: global.hero.strength * 0.5,
                duration: 900,
                start_time: global.frame_count,
                color: make_color_rgb(255, 50, 50),
                stat_type: "strength"
            };
            
            if (!variable_global_exists("ability_buffs")) {
                global.ability_buffs = [];
            }
            array_push(global.ability_buffs, temp_buff);
            apply_ability_buff_effect(temp_buff);
            
            add_notification("üî• –ë–æ–µ–≤–∞—è —è—Ä–æ—Å—Ç—å! –°–∏–ª–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞!");
        },
        color: make_color_rgb(255, 50, 50)
    },
    
    {   // –ü–ê–°–°–ò–í–ù–´–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò
        id: "iron_skin",
        name: "üõ°Ô∏è –ñ–µ–ª–µ–∑–Ω–∞—è –ö–æ–∂–∞",
        description: "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É –Ω–∞ 10%",
        type: global.ABILITY_TYPE.PASSIVE,
        icon: "üõ°Ô∏è",
        level_required: 3,
        mana_cost: 0,
        cooldown: 0,
        duration: 0,
        effect: function() {
            // –ü–∞—Å—Å–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏
            global.hero.passive_defense_bonus = 0.1;
            add_notification("üõ°Ô∏è –ñ–µ–ª–µ–∑–Ω–∞—è –∫–æ–∂–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! +10% –∫ –∑–∞—â–∏—Ç–µ");
        },
        color: make_color_rgb(100, 150, 255)
    },
    {
        id: "wisdom_aura",
        name: "üìö –ê—É—Ä–∞ –ú—É–¥—Ä–æ—Å—Ç–∏", 
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π –æ–ø—ã—Ç –Ω–∞ 15%",
        type: global.ABILITY_TYPE.PASSIVE,
        icon: "üìö",
        level_required: 6,
        mana_cost: 0,
        cooldown: 0,
        duration: 0,
        effect: function() {
            global.hero.exp_bonus = 0.15;
            add_notification("üìö –ê—É—Ä–∞ –º—É–¥—Ä–æ—Å—Ç–∏! +15% –∫ –æ–ø—ã—Ç—É");
        },
        color: make_color_rgb(150, 100, 255)
    },
    {
        id: "gold_finder",
        name: "üí∞ –ò—Å–∫–∞—Ç–µ–ª—å –ó–æ–ª–æ—Ç–∞",
        description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º–æ–µ –∑–æ–ª–æ—Ç–æ –Ω–∞ 20%",
        type: global.ABILITY_TYPE.PASSIVE,
        icon: "üí∞",
        level_required: 10,
        mana_cost: 0,
        cooldown: 0,
        duration: 0,
        effect: function() {
            global.hero.gold_bonus = 0.2;
            add_notification("üí∞ –ò—Å–∫–∞—Ç–µ–ª—å –∑–æ–ª–æ—Ç–∞! +20% –∫ –∑–æ–ª–æ—Ç—É");
        },
        color: make_color_rgb(255, 215, 0)
    },
    
    {   // –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò
        id: "time_stop",
        name: "‚è∞ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –í—Ä–µ–º–µ–Ω–∏",
        description: "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é",
        type: global.ABILITY_TYPE.ULTIMATE,
        icon: "‚è∞",
        level_required: 20,
        mana_cost: 100,
        cooldown: 1800, // 30 —Å–µ–∫—É–Ω–¥
        duration: 0,
        effect: function() {
            if (global.expedition.active) {
                global.expedition.progress = global.expedition.duration;
                add_notification("‚è∞ –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –≠–∫—Å–ø–µ–¥–∏—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
            } else {
                add_notification("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!");
            }
        },
        color: make_color_rgb(200, 100, 255)
    },
    {
        id: "phoenix_rebirth",
        name: "üî• –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ –§–µ–Ω–∏–∫—Å–∞",
        description: "–í–æ—Å–∫—Ä–µ—à–∞–µ—Ç –≥–µ—Ä–æ—è –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏ (1 —Ä–∞–∑ –∑–∞ –±–æ–π)",
        type: global.ABILITY_TYPE.ULTIMATE,
        icon: "üî•",
        level_required: 25,
        mana_cost: 150,
        cooldown: 3600, // 60 —Å–µ–∫—É–Ω–¥
        duration: 0,
        effect: function() {
            global.hero.phoenix_rebirth_available = true;
            add_notification("üî• –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ –§–µ–Ω–∏–∫—Å–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!");
        },
        color: make_color_rgb(255, 100, 50)
    }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
function init_abilities_system() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–µ—Ä–æ–π
    if (!variable_global_exists("hero")) {
        show_debug_message("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ì–µ—Ä–æ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è.");
        init_main_hero(); // –°–æ–∑–¥–∞–µ–º –≥–µ—Ä–æ—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    }
    
    if (!variable_global_exists("hero_abilities")) {
        global.hero_abilities = [];
    }
    
    if (!variable_global_exists("ability_cooldowns")) {
        global.ability_cooldowns = ds_map_create();
    }
    
    if (!variable_global_exists("ability_buffs")) {
        global.ability_buffs = [];
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –≥–µ—Ä–æ—è –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (—Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)
    if (!variable_struct_exists(global.hero, "max_mana")) {
        global.hero.max_mana = 100;
    }
    if (!variable_struct_exists(global.hero, "mana")) {
        global.hero.mana = global.hero.max_mana;
    }
    if (!variable_struct_exists(global.hero, "mana_regen")) {
        global.hero.mana_regen = 1.0; // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω—ã –≤ —Å–µ–∫—É–Ω–¥—É
    }
    if (!variable_struct_exists(global.hero, "next_attack_double")) {
        global.hero.next_attack_double = false;
    }
    if (!variable_struct_exists(global.hero, "phoenix_rebirth_available")) {
        global.hero.phoenix_rebirth_available = false;
    }
    
    show_debug_message("–°–∏—Å—Ç–µ–º–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
}

// –ò–∑—É—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
function learn_ability(ability_id) {
    var ability = get_ability(ability_id);
    if (ability == -1) {
        add_notification("–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑—É—á–µ–Ω–∞ –ª–∏ —É–∂–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    if (ability_is_learned(ability_id)) {
        add_notification("–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É–∂–µ –∏–∑—É—á–µ–Ω–∞!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    if (global.hero.level < ability.level_required) {
        add_notification("–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å " + string(ability.level_required) + "!");
        return false;
    }
    
    // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤
    if (ability.type == global.ABILITY_TYPE.ACTIVE || ability.type == global.ABILITY_TYPE.ULTIMATE) {
        if (global.hero.skill_points < 1) {
            add_notification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –Ω–∞–≤—ã–∫–æ–≤!");
            return false;
        }
        global.hero.skill_points--;
    }
    
    // –ò–∑—É—á–∞–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    array_push(global.hero_abilities, ability_id);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    if (ability.type == global.ABILITY_TYPE.PASSIVE) {
        ability.effect();
    }
    
    add_notification("–ò–∑—É—á–µ–Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: " + ability.name);
    return true;
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
function use_ability(ability_id) {
    var ability = get_ability(ability_id);
    if (ability == -1) {
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑—É—á–µ–Ω–∞ –ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    if (!ability_is_learned(ability_id)) {
        add_notification("–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–µ –∏–∑—É—á–µ–Ω–∞!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
    if (ability.type == global.ABILITY_TYPE.PASSIVE) {
        add_notification("–≠—Ç–æ –ø–∞—Å—Å–∏–≤–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–Ω—É
    if (global.hero.mana < ability.mana_cost) {
        add_notification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã!");
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É
    var cooldown_remaining = get_ability_cooldown(ability_id);
    if (cooldown_remaining > 0) {
        add_notification("–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: " + string(ceil(cooldown_remaining / 60)) + "—Å");
        return false;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    global.hero.mana -= ability.mana_cost;
    ability.effect();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É
    set_ability_cooldown(ability_id, ability.cooldown);
    
    return true;
}

// –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ ID
function get_ability(ability_id) {
    for (var i = 0; i < array_length(global.abilities_database); i++) {
        if (global.abilities_database[i].id == ability_id) {
            return global.abilities_database[i];
        }
    }
    return -1;
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–∑—É—á–µ–Ω–∞ –ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
function ability_is_learned(ability_id) {
    for (var i = 0; i < array_length(global.hero_abilities); i++) {
        if (global.hero_abilities[i] == ability_id) {
            return true;
        }
    }
    return false;
}

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫—É –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
function set_ability_cooldown(ability_id, cooldown) {
    ds_map_replace(global.ability_cooldowns, ability_id, cooldown);
}

// –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
function get_ability_cooldown(ability_id) {
    if (ds_map_exists(global.ability_cooldowns, ability_id)) {
        return ds_map_find_value(global.ability_cooldowns, ability_id);
    }
    return 0;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–æ–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
function update_abilities_cooldowns() {
    if (!variable_global_exists("ability_cooldowns")) return;
    
    var ability_id = ds_map_find_first(global.ability_cooldowns);
    while (!is_undefined(ability_id)) {
        var current_cooldown = ds_map_find_value(global.ability_cooldowns, ability_id);
        if (current_cooldown > 0) {
            ds_map_replace(global.ability_cooldowns, ability_id, current_cooldown - 1);
        }
        ability_id = ds_map_find_next(global.ability_cooldowns, ability_id);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞—Ñ—Ñ–æ–≤ –æ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
function update_ability_buffs() {
    if (!variable_global_exists("ability_buffs")) return;
    
    for (var i = array_length(global.ability_buffs) - 1; i >= 0; i--) {
        var buff = global.ability_buffs[i];
        if (global.frame_count - buff.start_time >= buff.duration) {
            remove_ability_buff_effect(buff);
            array_delete(global.ability_buffs, i, 1);
            add_notification("–î–µ–π—Å—Ç–≤–∏–µ " + buff.name + " –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å");
        }
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –±–∞—Ñ—Ñ–∞ –æ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
function apply_ability_buff_effect(buff) {
    if (!variable_global_exists("hero")) return;
    if (!variable_struct_exists(global.hero, "ability_bonuses")) {
        global.hero.ability_bonuses = {};
    }
    
    switch(buff.stat_type) {
        case "strength":
            if (!variable_struct_exists(global.hero.ability_bonuses, "strength")) {
                global.hero.ability_bonuses.strength = 0;
            }
            global.hero.ability_bonuses.strength += buff.value;
            break;
        case "defense":
            if (!variable_struct_exists(global.hero.ability_bonuses, "defense")) {
                global.hero.ability_bonuses.defense = 0;
            }
            global.hero.ability_bonuses.defense += buff.value;
            break;
    }
}

// –°–Ω—è—Ç–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –±–∞—Ñ—Ñ–∞ –æ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
function remove_ability_buff_effect(buff) {
    if (!variable_global_exists("hero")) return;
    if (!variable_struct_exists(global.hero, "ability_bonuses")) {
        return;
    }
    
    switch(buff.stat_type) {
        case "strength":
            if (variable_struct_exists(global.hero.ability_bonuses, "strength")) {
                global.hero.ability_bonuses.strength -= buff.value;
            }
            break;
        case "defense":
            if (variable_struct_exists(global.hero.ability_bonuses, "defense")) {
                global.hero.ability_bonuses.defense -= buff.value;
            }
            break;
    }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω—ã
function update_mana_regeneration() {
    if (!variable_global_exists("hero")) return;
    
    if (global.hero.mana < global.hero.max_mana) {
        global.hero.mana += global.hero.mana_regen / 60; // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–¥—Ä
        global.hero.mana = min(global.hero.mana, global.hero.max_mana);
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å–∏–ª—É —Å —É—á–µ—Ç–æ–º –±–∞—Ñ—Ñ–æ–≤ –æ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
function get_total_strength() {
    if (!variable_global_exists("hero")) return 0;
    
    var base_strength = global.hero.strength + global.hero.equipment_bonuses.strength;
    var ability_bonus = variable_struct_exists(global.hero, "ability_bonuses") && variable_struct_exists(global.hero.ability_bonuses, "strength") 
        ? global.hero.ability_bonuses.strength 
        : 0;
    return base_strength + ability_bonus;
}

// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –∑–∞—â–∏—Ç—É —Å —É—á–µ—Ç–æ–º –±–∞—Ñ—Ñ–æ–≤ –æ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
function get_total_defense() {
    if (!variable_global_exists("hero")) return 0;
    
    var base_defense = global.hero.equipment_bonuses.defense;
    var ability_bonus = variable_struct_exists(global.hero, "ability_bonuses") && variable_struct_exists(global.hero.ability_bonuses, "defense") 
        ? global.hero.ability_bonuses.defense 
        : 0;
    var passive_bonus = variable_struct_exists(global.hero, "passive_defense_bonus")
        ? base_defense * global.hero.passive_defense_bonus
        : 0;
    return base_defense + ability_bonus + passive_bonus;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–π –∞—Ç–∞–∫–∏
function handle_double_attack() {
    if (!variable_global_exists("hero")) return false;
    
    if (global.hero.next_attack_double) {
        global.hero.next_attack_double = false;
        return true;
    }
    return false;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –§–µ–Ω–∏–∫—Å–∞
function handle_phoenix_rebirth() {
    if (!variable_global_exists("hero")) return false;
    
    if (global.hero.phoenix_rebirth_available && global.hero.health <= 0) {
        global.hero.health = global.hero.max_health * 0.5;
        global.hero.phoenix_rebirth_available = false;
        add_notification("üî• –§–µ–Ω–∏–∫—Å –≤–æ–∑—Ä–æ–¥–∏–ª –≥–µ—Ä–æ—è!");
        return true;
    }
    return false;
}